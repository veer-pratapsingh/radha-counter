{"version":3,"file":"static/js/867.f5752b77.chunk.js","mappings":"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","sources":["node_modules/expo-modules-core/src/errors/CodedError.ts","node_modules/expo-modules-core/src/PermissionsHook.ts","node_modules/expo-modules-core/src/errors/UnavailabilityError.ts","node_modules/expo-modules-core/src/PermissionsInterface.ts","node_modules/expo-modules-core/src/environment/browser.web.ts","node_modules/expo-modules-core/src/Platform.ts","node_modules/expo-image-picker/src/ImagePicker.types.ts","node_modules/expo-image-picker/src/utils.ts","node_modules/expo-image-picker/src/ExponentImagePicker.web.ts","node_modules/expo-image-picker/src/ImagePicker.ts","node_modules/react-native-web/dist/exports/Platform/index.js"],"sourcesContent":["/**\n * A general error class that should be used for all errors in Expo modules.\n * Guarantees a `code` field that can be used to differentiate between different\n * types of errors without further subclassing Error.\n */\nexport class CodedError extends Error {\n  code: string;\n  info?: any;\n\n  constructor(code: string, message: string) {\n    super(message);\n    this.code = code;\n  }\n}\n","// Copyright Â© 2024 650 Industries.\n\n'use client';\n\nimport { useCallback, useEffect, useRef, useState } from 'react';\n\nimport { PermissionResponse } from './PermissionsInterface';\n\n// These types are identical, but improves the readability for suggestions in editors\ntype RequestPermissionMethod<Permission extends PermissionResponse> = () => Promise<Permission>;\ntype GetPermissionMethod<Permission extends PermissionResponse> = () => Promise<Permission>;\n\ntype PermissionHookMethods<Permission extends PermissionResponse, Options = never> = {\n  /** The permission method that requests the user to grant permission. */\n  requestMethod: (options?: Options) => Promise<Permission>;\n  /** The permission method that only fetches the current permission status. */\n  getMethod: (options?: Options) => Promise<Permission>;\n};\n\ntype PermissionHookBehavior = {\n  /** If the hook should automatically fetch the current permission status, without asking the user. */\n  get?: boolean;\n  /** If the hook should automatically request the user to grant permission. */\n  request?: boolean;\n};\n\nexport type PermissionHookOptions<Options extends object> = PermissionHookBehavior & Options;\n\n/**\n * Get or request permission for protected functionality within the app.\n * It uses separate permission requesters to interact with a single permission.\n * By default, the hook will only retrieve the permission status.\n */\nfunction usePermission<Permission extends PermissionResponse, Options extends object>(\n  methods: PermissionHookMethods<Permission, Options>,\n  options?: PermissionHookOptions<Options>\n): [Permission | null, RequestPermissionMethod<Permission>, GetPermissionMethod<Permission>] {\n  const isMounted = useRef(true);\n  const [status, setStatus] = useState<Permission | null>(null);\n  const { get = true, request = false, ...permissionOptions } = options || {};\n\n  const getPermission = useCallback(async () => {\n    const response = await methods.getMethod(\n      Object.keys(permissionOptions).length > 0 ? (permissionOptions as Options) : undefined\n    );\n    if (isMounted.current) setStatus(response);\n    return response;\n  }, [methods.getMethod]);\n\n  const requestPermission = useCallback(async () => {\n    const response = await methods.requestMethod(\n      Object.keys(permissionOptions).length > 0 ? (permissionOptions as Options) : undefined\n    );\n    if (isMounted.current) setStatus(response);\n    return response;\n  }, [methods.requestMethod]);\n\n  useEffect(\n    function runMethods() {\n      if (request) requestPermission();\n      if (!request && get) getPermission();\n    },\n    [get, request, requestPermission, getPermission]\n  );\n\n  // Workaround for unmounting components receiving state updates\n  useEffect(function didMount() {\n    isMounted.current = true;\n    return () => {\n      isMounted.current = false;\n    };\n  }, []);\n\n  return [status, requestPermission, getPermission];\n}\n\n/**\n * Create a new permission hook with the permission methods built-in.\n * This can be used to quickly create specific permission hooks in every module.\n */\nexport function createPermissionHook<Permission extends PermissionResponse, Options extends object>(\n  methods: PermissionHookMethods<Permission, Options>\n) {\n  return (options?: PermissionHookOptions<Options>) =>\n    usePermission<Permission, Options>(methods, options);\n}\n","import { CodedError } from './CodedError';\nimport Platform from '../Platform';\n\n/**\n * A class for errors to be thrown when a property is accessed which is\n * unavailable, unsupported, or not currently implemented on the running\n * platform.\n */\nexport class UnavailabilityError extends CodedError {\n  constructor(moduleName: string, propertyName: string) {\n    super(\n      'ERR_UNAVAILABLE',\n      `The method or property ${moduleName}.${propertyName} is not available on ${Platform.OS}, are you sure you've linked all the native dependencies properly?`\n    );\n  }\n}\n","export enum PermissionStatus {\n  /**\n   * User has granted the permission.\n   */\n  GRANTED = 'granted',\n  /**\n   * User hasn't granted or denied the permission yet.\n   */\n  UNDETERMINED = 'undetermined',\n  /**\n   * User has denied the permission.\n   */\n  DENIED = 'denied',\n}\n\n/**\n * Permission expiration time. Currently, all permissions are granted permanently.\n */\nexport type PermissionExpiration = 'never' | number;\n\n/**\n * An object obtained by permissions get and request functions.\n */\nexport type PermissionResponse = {\n  /**\n   * Determines the status of the permission.\n   */\n  status: PermissionStatus;\n  /**\n   * Determines time when the permission expires.\n   */\n  expires: PermissionExpiration;\n  /**\n   * A convenience boolean that indicates if the permission is granted.\n   */\n  granted: boolean;\n  /**\n   * Indicates if user can be asked again for specific permission.\n   * If not, one should be directed to the Settings app\n   * in order to enable/disable the permission.\n   */\n  canAskAgain: boolean;\n};\n","declare global {\n  // Add IE-specific interface to Window\n  interface Window {\n    attachEvent(event: string, listener: EventListener): boolean;\n  }\n}\n\n// Used for delegating node actions when browser APIs aren't available\n// like in SSR websites.\nexport const isDOMAvailable = typeof window !== 'undefined' && !!window.document?.createElement;\nexport const canUseEventListeners =\n  isDOMAvailable && !!(window.addEventListener || window.attachEvent);\nexport const canUseViewport = isDOMAvailable && !!window.screen;\nexport const isAsyncDebugging = false;\n","import { PlatformOSType, Platform as ReactNativePlatform } from 'react-native';\n\nimport {\n  isDOMAvailable,\n  canUseEventListeners,\n  canUseViewport,\n  isAsyncDebugging,\n} from './environment/browser';\n\nexport type PlatformSelectOSType = PlatformOSType | 'native' | 'electron' | 'default';\n\nexport type PlatformSelect = <T>(specifics: { [platform in PlatformSelectOSType]?: T }) => T;\n\nif (__DEV__ && typeof process.env.EXPO_OS === 'undefined') {\n  console.warn(\n    `The global process.env.EXPO_OS is not defined. This should be inlined by babel-preset-expo during transformation.`\n  );\n}\n\nconst nativeSelect =\n  typeof window !== 'undefined'\n    ? ReactNativePlatform.select\n    : // process.env.EXPO_OS is injected by `babel-preset-expo` and available in both client and `react-server` environments.\n      // Opt to use the env var when possible, and fallback to the React Native Platform module when it's not (arbitrary bundlers and transformers).\n      function select<T>(specifics: { [platform in PlatformSelectOSType]?: T }): T | undefined {\n        if (!process.env.EXPO_OS) return undefined;\n        if (specifics.hasOwnProperty(process.env.EXPO_OS)) {\n          return specifics[process.env.EXPO_OS as PlatformSelectOSType]!;\n        } else if (process.env.EXPO_OS !== 'web' && specifics.hasOwnProperty('native')) {\n          return specifics.native!;\n        } else if (specifics.hasOwnProperty('default')) {\n          return specifics.default!;\n        }\n        // do nothing...\n        return undefined;\n      };\n\nconst Platform = {\n  /**\n   * Denotes the currently running platform.\n   * Can be one of ios, android, web.\n   */\n  OS: process.env.EXPO_OS || ReactNativePlatform.OS,\n  /**\n   * Returns the value with the matching platform.\n   * Object keys can be any of ios, android, native, web, default.\n   *\n   * @ios ios, native, default\n   * @android android, native, default\n   * @web web, default\n   */\n  select: nativeSelect as PlatformSelect,\n  /**\n   * Denotes if the DOM API is available in the current environment.\n   * The DOM is not available in native React runtimes and Node.js.\n   */\n  isDOMAvailable,\n  /**\n   * Denotes if the current environment can attach event listeners\n   * to the window. This will return false in native React\n   * runtimes and Node.js.\n   */\n  canUseEventListeners,\n  /**\n   * Denotes if the current environment can inspect properties of the\n   * screen on which the current window is being rendered. This will\n   * return false in native React runtimes and Node.js.\n   */\n  canUseViewport,\n  /**\n   * If the JavaScript is being executed in a remote JavaScript environment.\n   * When `true`, synchronous native invocations cannot be executed.\n   */\n  isAsyncDebugging,\n};\n\nexport default Platform;\n","import { PermissionResponse } from 'expo-modules-core';\n\n// @needsAudit\n/**\n * Alias for `PermissionResponse` type exported by `expo-modules-core`.\n */\nexport type CameraPermissionResponse = PermissionResponse;\n\n// @needsAudit\n/**\n * Extends `PermissionResponse` type exported by `expo-modules-core`, containing additional iOS-specific field.\n */\nexport type MediaLibraryPermissionResponse = PermissionResponse & {\n  /**\n   * Indicates if your app has access to the whole or only part of the photo library. Possible values are:\n   * - `'all'` if the user granted your app access to the whole photo library\n   * - `'limited'` if the user granted your app access only to selected photos (only available on Android API 34+ and iOS 14.0+)\n   * - `'none'` if user denied or hasn't yet granted the permission\n   */\n  accessPrivileges?: 'all' | 'limited' | 'none';\n};\n\n// @needsAudit\n/**\n * @deprecated To set media types available in the image picker use an array of [`MediaType`](#mediatype) instead.\n */\nexport enum MediaTypeOptions {\n  /**\n   * Images and videos.\n   */\n  All = 'All',\n  /**\n   * Only videos.\n   */\n  Videos = 'Videos',\n  /**\n   * Only images.\n   */\n  Images = 'Images',\n}\n\n/**\n * Media types that can be picked by the image picker.\n * - `'images'` - for images.\n * - `'videos'` - for videos.\n * - `'livePhotos'` - for live photos (iOS only).\n *\n * > When the `livePhotos` type is added to the media types array and a live photo is selected,\n * > the resulting `ImagePickerAsset` will contain an unaltered image and the `pairedVideoAsset` field will contain a\n * > video asset paired with the image. This option will be ignored when the `allowsEditing` option is enabled. Due\n * > to platform limitations live photos are returned at original quality, regardless of the `quality` option.\n *\n * > When on Android or Web `livePhotos` type passed as a media type will be ignored.\n */\nexport type MediaType = 'images' | 'videos' | 'livePhotos';\n\n/**\n * The default tab with which the image picker will be opened.\n * - `'photos'` - the photos/videos tab will be opened.\n * - `'albums'` - the albums tab will be opened.\n *\n * @platform android\n */\nexport type DefaultTab = 'photos' | 'albums';\n\n// @needsAudit\nexport enum VideoExportPreset {\n  /**\n   * Resolution: __Unchanged__ â¢\n   * Video compression: __None__ â¢\n   * Audio compression: __None__\n   */\n  Passthrough = 0,\n  /**\n   * Resolution: __Depends on the device__ â¢\n   * Video compression: __H.264__ â¢\n   * Audio compression: __AAC__\n   */\n  LowQuality = 1,\n  /**\n   * Resolution: __Depends on the device__ â¢\n   * Video compression: __H.264__ â¢\n   * Audio compression: __AAC__\n   */\n  MediumQuality = 2,\n  /**\n   * Resolution: __Depends on the device__ â¢\n   * Video compression: __H.264__ â¢\n   * Audio compression: __AAC__\n   */\n  HighestQuality = 3,\n  /**\n   * Resolution: __640 Ã 480__ â¢\n   * Video compression: __H.264__ â¢\n   * Audio compression: __AAC__\n   */\n  H264_640x480 = 4,\n  /**\n   * Resolution: __960 Ã 540__ â¢\n   * Video compression: __H.264__ â¢\n   * Audio compression: __AAC__\n   */\n  H264_960x540 = 5,\n  /**\n   * Resolution: __1280 Ã 720__ â¢\n   * Video compression: __H.264__ â¢\n   * Audio compression: __AAC__\n   */\n  H264_1280x720 = 6,\n  /**\n   * Resolution: __1920 Ã 1080__ â¢\n   * Video compression: __H.264__ â¢\n   * Audio compression: __AAC__\n   */\n  H264_1920x1080 = 7,\n  /**\n   * Resolution: __3840 Ã 2160__ â¢\n   * Video compression: __H.264__ â¢\n   * Audio compression: __AAC__\n   */\n  H264_3840x2160 = 8,\n  /**\n   * Resolution: __1920 Ã 1080__ â¢\n   * Video compression: __HEVC__ â¢\n   * Audio compression: __AAC__\n   */\n  HEVC_1920x1080 = 9,\n  /**\n   * Resolution: __3840 Ã 2160__ â¢\n   * Video compression: __HEVC__ â¢\n   * Audio compression: __AAC__\n   */\n  HEVC_3840x2160 = 10,\n}\n\n// @needsAudit\nexport enum UIImagePickerControllerQualityType {\n  /**\n   * Highest available resolution.\n   */\n  High = 0,\n  /**\n   * Depends on the device.\n   */\n  Medium = 1,\n  /**\n   * Depends on the device.\n   */\n  Low = 2,\n  /**\n   * 640 Ã 480\n   */\n  VGA640x480 = 3,\n  /**\n   * 1280 Ã 720\n   */\n  IFrame1280x720 = 4,\n  /**\n   * 960 Ã 540\n   */\n  IFrame960x540 = 5,\n}\n\n/**\n * Picker presentation style. Its values are directly mapped to the [`UIModalPresentationStyle`](https://developer.apple.com/documentation/uikit/uiviewcontroller/1621355-modalpresentationstyle).\n *\n * @platform ios\n */\nexport enum UIImagePickerPresentationStyle {\n  /**\n   * A presentation style in which the presented picker covers the screen.\n   */\n  FULL_SCREEN = 'fullScreen',\n  /**\n   * A presentation style that partially covers the underlying content.\n   */\n  PAGE_SHEET = 'pageSheet',\n  /**\n   * A presentation style that displays the picker centered in the screen.\n   */\n  FORM_SHEET = 'formSheet',\n  /**\n   * A presentation style where the picker is displayed over the app's content.\n   */\n  CURRENT_CONTEXT = 'currentContext',\n  /**\n   * A presentation style in which the picker view covers the screen.\n   */\n  OVER_FULL_SCREEN = 'overFullScreen',\n  /**\n   * A presentation style where the picker is displayed over the app's content.\n   */\n  OVER_CURRENT_CONTEXT = 'overCurrentContext',\n  /**\n   * A presentation style where the picker is displayed in a popover view.\n   */\n  POPOVER = 'popover',\n  /**\n   * The default presentation style chosen by the system.\n   * On older iOS versions, falls back to `WebBrowserPresentationStyle.FullScreen`.\n   *\n   * @platform ios\n   */\n  AUTOMATIC = 'automatic',\n}\n\n/**\n * Picker preferred asset representation mode. Its values are directly mapped to the [`PHPickerConfigurationAssetRepresentationMode`](https://developer.apple.com/documentation/photokit/phpickerconfigurationassetrepresentationmode).\n *\n * @platform ios\n */\nexport enum UIImagePickerPreferredAssetRepresentationMode {\n  /**\n   * A mode that indicates that the system chooses the appropriate asset representation.\n   */\n  Automatic = 'automatic',\n  /**\n   * A mode that uses the most compatible asset representation.\n   */\n  Compatible = 'compatible',\n  /**\n   * A mode that uses the current representation to avoid transcoding, if possible.\n   */\n  Current = 'current',\n}\n\nexport enum CameraType {\n  /**\n   * Back/rear camera.\n   */\n  back = 'back',\n  /**\n   * Front camera\n   */\n  front = 'front',\n}\n\n/**\n * @hidden\n * @deprecated Use `ImagePickerAsset` instead\n */\nexport type ImageInfo = ImagePickerAsset;\n\n/**\n * Represents an asset (image or video) returned by the image picker or camera.\n */\nexport type ImagePickerAsset = {\n  /**\n   * URI to the local image or video file (usable as the source of an `Image` element, in the case of\n   * an image) and `width` and `height` specify the dimensions of the media.\n   */\n  uri: string;\n  /**\n   * The unique ID that represents the picked image or video, if picked from the library. It can be used\n   * by [expo-media-library](./media-library) to manage the picked asset.\n   *\n   * > This might be `null` when the ID is unavailable or the user gave limited permission to access the media library.\n   * > On Android, the ID is unavailable when the user selects a photo by directly browsing file system.\n   *\n   * @platform android\n   * @platform ios\n   */\n  assetId?: string | null;\n  /**\n   * Width of the image or video.\n   */\n  width: number;\n  /**\n   * Height of the image or video.\n   */\n  height: number;\n  /**\n   * The type of the asset.\n   * - `'image'` - for images.\n   * - `'video'` - for videos.\n   * - `'livePhoto'` - for live photos. (iOS only)\n   * - `'pairedVideo'` - for videos paired with photos, which can be combined to create a live photo. (iOS only)\n   */\n  type?: 'image' | 'video' | 'livePhoto' | 'pairedVideo';\n  /**\n   * Preferred filename to use when saving this item. This might be `null` when the name is unavailable\n   * or user gave limited permission to access the media library.\n   *\n   */\n  fileName?: string | null;\n  /**\n   * File size of the picked image or video, in bytes.\n   *\n   */\n  fileSize?: number;\n  /**\n   * The `exif` field is included if the `exif` option is truthy, and is an object containing the\n   * image's EXIF data. The names of this object's properties are EXIF tags and the values are the\n   * respective EXIF values for those tags.\n   *\n   * @platform android\n   * @platform ios\n   */\n  exif?: Record<string, any> | null;\n  /**\n   * When the `base64` option is truthy, it is a Base64-encoded string of the selected image's JPEG data, otherwise `null`.\n   * If you prepend this with `'data:image/jpeg;base64,'` to create a data URI,\n   * you can use it as the source of an `Image` element; for example:\n   * ```ts\n   * <Image\n   *   source={{ uri: 'data:image/jpeg;base64,' + asset.base64 }}\n   *   style={{ width: 200, height: 200 }}\n   * />\n   * ```\n   */\n  base64?: string | null;\n  /**\n   * Length of the video in milliseconds or `null` if the asset is not a video.\n   */\n  duration?: number | null;\n  /**\n   * The MIME type of the selected asset or `null` if could not be determined.\n   */\n  mimeType?: string;\n  /**\n   * Contains information about the video paired with the image file. This property is only set when `livePhotos` media type was present in the `mediaTypes` array when launching the picker and a live photo was selected.\n   *\n   * @platform ios\n   */\n  pairedVideoAsset?: ImagePickerAsset | null;\n\n  /**\n   * The web `File` object containing the selected media. This property is web-only and can be used to upload to a server with `FormData`.\n   *\n   * @platform web\n   */\n  file?: File;\n};\n\n// @needsAudit\nexport type ImagePickerErrorResult = {\n  /**\n   * The error code.\n   */\n  code: string;\n  /**\n   * The error message.\n   */\n  message: string;\n  /**\n   * The exception which caused the error.\n   */\n  exception?: string;\n};\n\n// @needsAudit\n/**\n * Type representing successful and canceled pick result.\n */\nexport type ImagePickerResult = ImagePickerSuccessResult | ImagePickerCanceledResult;\n\n/**\n * Type representing successful pick result.\n */\nexport type ImagePickerSuccessResult = {\n  /**\n   * Boolean flag set to `false` showing that the request was successful.\n   */\n  canceled: false;\n  /**\n   * An array of picked assets.\n   */\n  assets: ImagePickerAsset[];\n};\n\n/**\n * Type representing canceled pick result.\n */\nexport type ImagePickerCanceledResult = {\n  /**\n   * Boolean flag set to `true` showing that the request was canceled.\n   */\n  canceled: true;\n  /**\n   * `null` signifying that the request was canceled.\n   */\n  assets: null;\n};\n\n/**\n * @hidden\n * @deprecated Use `ImagePickerResult` instead.\n */\nexport type ImagePickerCancelledResult = ImagePickerCanceledResult;\n\n/**\n * @hidden\n * @deprecated `ImagePickerMultipleResult` has been deprecated in favor of `ImagePickerResult`.\n */\nexport type ImagePickerMultipleResult = ImagePickerResult;\n\n// @needsAudit\nexport type ImagePickerOptions = {\n  /**\n   * Whether to show a UI to edit the image after it is picked. On Android the user can crop and\n   * rotate the image and on iOS simply crop it.\n   *\n   * > - Cropping multiple images is not supported - this option is mutually exclusive with `allowsMultipleSelection`.\n   * > - On iOS, this option is ignored if `allowsMultipleSelection` is enabled.\n   * > - On iOS cropping a `.bmp` image will convert it to `.png`.\n   *\n   * @default false\n   * @platform android\n   * @platform ios\n   */\n  allowsEditing?: boolean;\n  /**\n   * An array with two entries `[x, y]` specifying the aspect ratio to maintain if the user is\n   * allowed to edit the image (by passing `allowsEditing: true`). This is only applicable on\n   * Android, since on iOS the crop rectangle is always a square.\n   */\n  aspect?: [number, number];\n  /**\n   * Specify the quality of compression, from `0` to `1`. `0` means compress for small size,\n   * `1` means compress for maximum quality.\n   * > Note: If the selected image has been compressed before, the size of the output file may be\n   * > bigger than the size of the original image.\n   *\n   * > Note: On iOS, if a `.bmp` or `.png` image is selected from the library, this option is ignored.\n   *\n   * @default 1.0\n   * @platform android\n   * @platform ios\n   */\n  quality?: number;\n  /**\n   * Choose what type of media to pick.\n   * @default 'images'\n   */\n  mediaTypes?: MediaType | MediaType[] | MediaTypeOptions;\n  /**\n   * Whether to also include the EXIF data for the image. On iOS the EXIF data does not include GPS\n   * tags in the camera case.\n   *\n   * @platform android\n   * @platform ios\n   */\n  exif?: boolean;\n  /**\n   * Whether to also include the image data in Base64 format.\n   */\n  base64?: boolean;\n  /**\n   * Specify preset which will be used to compress selected video.\n   * @default ImagePicker.VideoExportPreset.Passthrough\n   * @platform ios 11+\n   * @deprecated See [`videoExportPreset`](https://developer.apple.com/documentation/uikit/uiimagepickercontroller/2890964-videoexportpreset?language=objc)\n   * in Apple documentation.\n   */\n  videoExportPreset?: VideoExportPreset;\n  /**\n   * Specify the quality of recorded videos. Defaults to the highest quality available for the device.\n   * @default ImagePicker.UIImagePickerControllerQualityType.High\n   * @platform ios\n   */\n  videoQuality?: UIImagePickerControllerQualityType;\n  /**\n   * Whether or not to allow selecting multiple media files at once.\n   *\n   * > Cropping multiple images is not supported - this option is mutually exclusive with `allowsEditing`.\n   * > If this option is enabled, then `allowsEditing` is ignored.\n   *\n   * @default false\n   * @platform android\n   * @platform ios 14+\n   * @platform web\n   */\n  allowsMultipleSelection?: boolean;\n  /**\n   * The maximum number of items that user can select. Applicable when `allowsMultipleSelection` is enabled.\n   * Setting the value to `0` sets the selection limit to the maximum that the system supports.\n   *\n   * @platform android\n   * @platform ios 14+\n   * @default 0\n   */\n  selectionLimit?: number;\n  /**\n   * Whether to display number badges when assets are selected. The badges are numbered\n   * in selection order. Assets are then returned in the exact same order they were selected.\n   *\n   * > Assets should be returned in the selection order regardless of this option,\n   * > but there is no guarantee that it is always true when this option is disabled.\n   *\n   * @platform ios 15+\n   * @default false\n   */\n  orderedSelection?: boolean;\n  /**\n   * Choose the default tab with which the image picker will be opened.\n   * @default 'photos'\n   * @platform android\n   */\n  defaultTab?: DefaultTab;\n  /**\n   * Maximum duration, in seconds, for video recording. Setting this to `0` disables the limit.\n   * Defaults to `0` (no limit).\n   * - **On iOS**, when `allowsEditing` is set to `true`, maximum duration is limited to 10 minutes.\n   *   This limit is applied automatically, if `0` or no value is specified.\n   * - **On Android**, effect of this option depends on support of installed camera app.\n   * - **On Web** this option has no effect - the limit is browser-dependant.\n   */\n  videoMaxDuration?: number;\n  /**\n   * Choose [presentation style](https://developer.apple.com/documentation/uikit/uiviewcontroller/1621355-modalpresentationstyle?language=objc)\n   * to customize view during taking photo/video.\n   * @default ImagePicker.UIImagePickerPresentationStyle.Automatic\n   * @platform ios\n   */\n  presentationStyle?: UIImagePickerPresentationStyle;\n  /**\n   * Selects the camera-facing type. The `CameraType` enum provides two options:\n   * `front` for the front-facing camera and `back` for the back-facing camera.\n   * - **On Android**, the behavior of this option may vary based on the camera app installed on the device.\n   * - **On Web**, if this option is not provided, use \"camera\" as the default value of internal input element for backwards compatibility.\n   * @default CameraType.back\n   */\n  cameraType?: CameraType;\n  /**\n   * Choose [preferred asset representation mode](https://developer.apple.com/documentation/photokit/phpickerconfigurationassetrepresentationmode)\n   * to use when loading assets.\n   * @default ImagePicker.UIImagePickerPreferredAssetRepresentationMode.Automatic\n   * @platform ios 14+\n   */\n  preferredAssetRepresentationMode?: UIImagePickerPreferredAssetRepresentationMode;\n  /**\n   * Uses the legacy image picker on Android. This will allow media to be selected from outside the users photo library.\n   * @platform android\n   * @default false\n   */\n  legacy?: boolean;\n};\n\n/**\n * @hidden\n * @deprecated Only used internally.\n */\nexport type OpenFileBrowserOptions = {\n  /**\n   * Choose what type of media to pick.\n   * @default 'images'\n   */\n  mediaTypes: MediaType | MediaType[] | MediaTypeOptions;\n  // @docsMissing\n  capture?: boolean | CameraType;\n  /**\n   * Whether or not to allow selecting multiple media files at once.\n   * @platform web\n   */\n  allowsMultipleSelection: boolean;\n  /**\n   * Whether to also include the image data in Base64 format.\n   */\n  base64: boolean;\n};\n\n/**\n * @hidden\n * @deprecated Use `ImagePickerResult` or `OpenFileBrowserOptions` instead.\n */\nexport type ExpandImagePickerResult<T extends ImagePickerOptions | OpenFileBrowserOptions> =\n  T extends {\n    allowsMultipleSelection: true;\n  }\n    ? ImagePickerResult\n    : ImagePickerResult;\n","// @hidden\nimport { ImagePickerOptions, MediaType, MediaTypeOptions } from './ImagePicker.types';\n\nexport function parseMediaTypes(\n  mediaTypes: MediaTypeOptions | MediaType | MediaType[]\n): MediaType[] {\n  const mediaTypeOptionsToMediaType: Record<MediaTypeOptions, MediaType[]> = {\n    Images: ['images'],\n    Videos: ['videos'],\n    All: ['images', 'videos'],\n  };\n\n  if (\n    mediaTypes === MediaTypeOptions.Images ||\n    mediaTypes === MediaTypeOptions.Videos ||\n    mediaTypes === MediaTypeOptions.All\n  ) {\n    console.warn(\n      '[expo-image-picker] `ImagePicker.MediaTypeOptions` have been deprecated. Use `ImagePicker.MediaType` or an array of `ImagePicker.MediaType` instead.'\n    );\n    return mediaTypeOptionsToMediaType[mediaTypes];\n  }\n  // Unlike iOS, Android can't auto-cast to array\n  if (typeof mediaTypes === 'string') {\n    return [mediaTypes];\n  }\n  return mediaTypes;\n}\n\n// We deprecated the MediaTypeOptions in SDK52, we should remove it in future release.\nexport function mapDeprecatedOptions(options: ImagePickerOptions) {\n  if (!options.mediaTypes) {\n    return options;\n  }\n  return { ...options, mediaTypes: parseMediaTypes(options.mediaTypes ?? []) };\n}\n","import { PermissionResponse, PermissionStatus, Platform } from 'expo-modules-core';\n\nimport {\n  CameraType,\n  ImagePickerAsset,\n  ImagePickerOptions,\n  ImagePickerResult,\n  MediaType,\n  MediaTypeOptions,\n  OpenFileBrowserOptions,\n} from './ImagePicker.types';\nimport { parseMediaTypes } from './utils';\n\nconst MediaTypeInput: Record<MediaType, string> = {\n  images: 'image/*',\n  videos: 'video/mp4,video/quicktime,video/x-m4v,video/*',\n  livePhotos: '',\n};\n\nexport default {\n  async launchImageLibraryAsync({\n    mediaTypes = ['images'] as MediaType[],\n    allowsMultipleSelection = false,\n    base64 = false,\n  }: ImagePickerOptions): Promise<ImagePickerResult> {\n    // SSR guard\n    if (!Platform.isDOMAvailable) {\n      return { canceled: true, assets: null };\n    }\n    return await openFileBrowserAsync({\n      mediaTypes,\n      allowsMultipleSelection,\n      base64,\n    });\n  },\n\n  async launchCameraAsync({\n    mediaTypes = MediaTypeOptions.Images,\n    allowsMultipleSelection = false,\n    base64 = false,\n    cameraType,\n  }: ImagePickerOptions): Promise<ImagePickerResult> {\n    // SSR guard\n    if (!Platform.isDOMAvailable) {\n      return { canceled: true, assets: null };\n    }\n    return await openFileBrowserAsync({\n      mediaTypes,\n      allowsMultipleSelection,\n      capture: cameraType ?? true,\n      base64,\n    });\n  },\n\n  /*\n   * Delegate to expo-permissions to request camera permissions\n   */\n  async getCameraPermissionsAsync() {\n    return permissionGrantedResponse();\n  },\n  async requestCameraPermissionsAsync() {\n    return permissionGrantedResponse();\n  },\n\n  /*\n   * Camera roll permissions don't need to be requested on web, so we always\n   * respond with granted.\n   */\n  async getMediaLibraryPermissionsAsync(_writeOnly: boolean) {\n    return permissionGrantedResponse();\n  },\n  async requestMediaLibraryPermissionsAsync(_writeOnly: boolean): Promise<PermissionResponse> {\n    return permissionGrantedResponse();\n  },\n};\n\nfunction permissionGrantedResponse(): PermissionResponse {\n  return {\n    status: PermissionStatus.GRANTED,\n    expires: 'never',\n    granted: true,\n    canAskAgain: true,\n  };\n}\n\nfunction openFileBrowserAsync({\n  mediaTypes,\n  capture = false,\n  allowsMultipleSelection = false,\n  base64,\n}: OpenFileBrowserOptions): Promise<ImagePickerResult> {\n  const parsedMediaTypes = parseMediaTypes(mediaTypes);\n\n  const mediaTypeFormat = createMediaTypeFormat(parsedMediaTypes);\n\n  const input = document.createElement('input');\n  input.style.display = 'none';\n  input.setAttribute('type', 'file');\n  input.setAttribute('accept', mediaTypeFormat);\n  input.setAttribute('id', String(Math.random()));\n  input.setAttribute('data-testid', 'file-input');\n  if (allowsMultipleSelection) {\n    input.setAttribute('multiple', 'multiple');\n  }\n  if (capture) {\n    switch (capture) {\n      case true:\n        input.setAttribute('capture', 'camera');\n        break;\n      case CameraType.front:\n        input.setAttribute('capture', 'environment');\n        break;\n      case CameraType.back:\n        input.setAttribute('capture', 'user');\n    }\n  }\n  document.body.appendChild(input);\n\n  return new Promise((resolve) => {\n    input.addEventListener('change', async () => {\n      if (input.files?.length) {\n        const files = allowsMultipleSelection ? input.files : [input.files[0]];\n        const assets: ImagePickerAsset[] = await Promise.all(\n          Array.from(files).map((file) => readFile(file, { base64 }))\n        );\n\n        resolve({ canceled: false, assets });\n      } else {\n        resolve({ canceled: true, assets: null });\n      }\n      document.body.removeChild(input);\n    });\n    input.addEventListener('cancel', () => {\n      input.dispatchEvent(new Event('change'));\n    });\n\n    const event = new MouseEvent('click');\n    input.dispatchEvent(event);\n  });\n}\n\nfunction readFile(targetFile: File, options: { base64: boolean }): Promise<ImagePickerAsset> {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.onerror = () => {\n      reject(new Error(`Failed to read the selected media because the operation failed.`));\n    };\n    reader.onload = ({ target }) => {\n      const uri = (target as any).result;\n      const returnRaw = () => resolve({ uri, width: 0, height: 0 });\n      const returnMediaData = (data: ImagePickerAsset) => {\n        resolve({\n          ...data,\n          ...(options.base64 && { base64: uri.substr(uri.indexOf(',') + 1) }),\n          file: targetFile,\n        });\n      };\n\n      if (typeof uri === 'string') {\n        if (targetFile.type.startsWith('image/')) {\n          const image = new Image();\n          image.src = uri;\n          image.onload = () => {\n            returnMediaData({\n              uri,\n              width: image.naturalWidth ?? image.width,\n              height: image.naturalHeight ?? image.height,\n              type: 'image',\n              mimeType: targetFile.type,\n              fileName: targetFile.name,\n              fileSize: targetFile.size,\n            });\n          };\n          image.onerror = () => returnRaw();\n        } else if (targetFile.type.startsWith('video/')) {\n          const video = document.createElement('video');\n          video.preload = 'metadata';\n          video.src = uri;\n          video.onloadedmetadata = () => {\n            returnMediaData({\n              uri,\n              width: video.videoWidth,\n              height: video.videoHeight,\n              type: 'video',\n              mimeType: targetFile.type,\n              fileName: targetFile.name,\n              fileSize: targetFile.size,\n              duration: video.duration,\n            });\n          };\n          video.onerror = () => returnRaw();\n        } else {\n          returnRaw();\n        }\n      } else {\n        returnRaw();\n      }\n    };\n\n    reader.readAsDataURL(targetFile);\n  });\n}\n\nfunction createMediaTypeFormat(mediaTypes: MediaType[]): string {\n  const filteredMediaTypes = mediaTypes.filter((mediaType) => mediaType !== 'livePhotos');\n  if (filteredMediaTypes.length === 0) {\n    return 'image/*';\n  }\n  let result = '';\n  for (const mediaType of filteredMediaTypes) {\n    // Make sure the types don't repeat\n    if (!result.includes(MediaTypeInput[mediaType])) {\n      result = result.concat(',', MediaTypeInput[mediaType]);\n    }\n  }\n  return result;\n}\n","import {\n  CodedError,\n  createPermissionHook,\n  PermissionExpiration,\n  PermissionHookOptions,\n  PermissionResponse,\n  PermissionStatus,\n  UnavailabilityError,\n} from 'expo-modules-core';\n\nimport ExponentImagePicker from './ExponentImagePicker';\nimport {\n  CameraPermissionResponse,\n  ImagePickerErrorResult,\n  ImagePickerOptions,\n  ImagePickerResult,\n  MediaLibraryPermissionResponse,\n} from './ImagePicker.types';\nimport { mapDeprecatedOptions } from './utils';\n\nfunction validateOptions(options: ImagePickerOptions) {\n  const { aspect, quality, videoMaxDuration } = options;\n\n  if (aspect != null) {\n    const [x, y] = aspect;\n\n    if (x <= 0 || y <= 0) {\n      throw new CodedError(\n        'ERR_INVALID_ARGUMENT',\n        `Invalid aspect ratio values ${x}:${y}. Provide positive numbers.`\n      );\n    }\n  }\n\n  if (quality && (quality < 0 || quality > 1)) {\n    throw new CodedError(\n      'ERR_INVALID_ARGUMENT',\n      `Invalid 'quality' value ${quality}. Provide a value between 0 and 1.`\n    );\n  }\n\n  if (videoMaxDuration && videoMaxDuration < 0) {\n    throw new CodedError(\n      'ERR_INVALID_ARGUMENT',\n      `Invalid 'videoMaxDuration' value ${videoMaxDuration}. Provide a non-negative number.`\n    );\n  }\n\n  return options;\n}\n\n// @needsAudit\n/**\n * Checks user's permissions for accessing camera.\n * @return A promise that fulfills with an object of type [CameraPermissionResponse](#camerapermissionresponse).\n */\nexport async function getCameraPermissionsAsync(): Promise<CameraPermissionResponse> {\n  return ExponentImagePicker.getCameraPermissionsAsync();\n}\n\n// @needsAudit\n/**\n * Checks user's permissions for accessing photos.\n * @param writeOnly Whether to request write or read and write permissions. Defaults to `false`\n * @return A promise that fulfills with an object of type [MediaLibraryPermissionResponse](#medialibrarypermissionresponse).\n */\nexport async function getMediaLibraryPermissionsAsync(\n  writeOnly: boolean = false\n): Promise<MediaLibraryPermissionResponse> {\n  return ExponentImagePicker.getMediaLibraryPermissionsAsync(writeOnly);\n}\n\n// @needsAudit\n/**\n * Asks the user to grant permissions for accessing camera. This does nothing on web because the\n * browser camera is not used.\n * @return A promise that fulfills with an object of type [CameraPermissionResponse](#camerarollpermissionresponse).\n */\nexport async function requestCameraPermissionsAsync(): Promise<CameraPermissionResponse> {\n  return ExponentImagePicker.requestCameraPermissionsAsync();\n}\n\n// @needsAudit\n/**\n * Asks the user to grant permissions for accessing user's photo. This method does nothing on web.\n * @param writeOnly Whether to request write or read and write permissions. Defaults to `false`\n * @return A promise that fulfills with an object of type [MediaLibraryPermissionResponse](#medialibrarypermissionresponse).\n */\nexport async function requestMediaLibraryPermissionsAsync(\n  writeOnly: boolean = false\n): Promise<MediaLibraryPermissionResponse> {\n  const imagePickerMethod = ExponentImagePicker.requestMediaLibraryPermissionsAsync;\n  return imagePickerMethod(writeOnly);\n}\n\n// @needsAudit\n/**\n * Check or request permissions to access the media library.\n * This uses both `requestMediaLibraryPermissionsAsync` and `getMediaLibraryPermissionsAsync` to interact with the permissions.\n *\n * @example\n * ```ts\n * const [status, requestPermission] = ImagePicker.useMediaLibraryPermissions();\n * ```\n */\nexport const useMediaLibraryPermissions = createPermissionHook<\n  MediaLibraryPermissionResponse,\n  { writeOnly?: boolean }\n>({\n  // TODO(cedric): permission requesters should have an options param or a different requester\n  getMethod: (options) => getMediaLibraryPermissionsAsync(options?.writeOnly),\n  requestMethod: (options) => requestMediaLibraryPermissionsAsync(options?.writeOnly),\n});\n\n// @needsAudit\n/**\n * Check or request permissions to access the camera.\n * This uses both `requestCameraPermissionsAsync` and `getCameraPermissionsAsync` to interact with the permissions.\n *\n * @example\n * ```ts\n * const [status, requestPermission] = ImagePicker.useCameraPermissions();\n * ```\n */\nexport const useCameraPermissions = createPermissionHook({\n  getMethod: getCameraPermissionsAsync,\n  requestMethod: requestCameraPermissionsAsync,\n});\n\n// @needsAudit\n/**\n * Android system sometimes kills the `MainActivity` after the `ImagePicker` finishes. When this\n * happens, we lose the data selected using the `ImagePicker`. However, you can retrieve the lost\n * data by calling `getPendingResultAsync`. You can test this functionality by turning on\n * `Don't keep activities` in the developer options.\n * @return\n * - **On Android:** a promise that resolves to an object of exactly same type as in\n * `ImagePicker.launchImageLibraryAsync` or `ImagePicker.launchCameraAsync` if the `ImagePicker`\n * finished successfully. Otherwise, an object of type [`ImagePickerErrorResult`](#imagepickerimagepickererrorresult).\n * - **On other platforms:** `null`\n */\nexport async function getPendingResultAsync(): Promise<\n  ImagePickerResult | ImagePickerErrorResult | null\n> {\n  if (ExponentImagePicker.getPendingResultAsync) {\n    return ExponentImagePicker.getPendingResultAsync();\n  }\n  return null;\n}\n\n// @needsAudit\n/**\n * Display the system UI for taking a photo with the camera. Requires `Permissions.CAMERA`.\n * On Android and iOS 10 `Permissions.CAMERA_ROLL` is also required. On mobile web, this must be\n * called immediately in a user interaction like a button press, otherwise the browser will block\n * the request without a warning.\n * > **Note:** Make sure that you handle `MainActivity` destruction on **Android**. See [ImagePicker.getPendingResultAsync](#imagepickergetpendingresultasync).\n * > **Notes for Web:** The system UI can only be shown after user activation (e.g. a `Button` press).\n * Therefore, calling `launchCameraAsync` in `componentDidMount`, for example, will **not** work as\n * intended. The `cancelled` event will not be returned in the browser due to platform restrictions\n * and inconsistencies across browsers.\n * @param options An `ImagePickerOptions` object.\n * @return A promise that resolves to an object with `canceled` and `assets` fields.\n * When the user canceled the action the `assets` is always `null`, otherwise it's an array of\n * the selected media assets which have a form of [`ImagePickerAsset`](#imagepickerasset).\n */\nexport async function launchCameraAsync(\n  options: ImagePickerOptions = {}\n): Promise<ImagePickerResult> {\n  if (!ExponentImagePicker.launchCameraAsync) {\n    throw new UnavailabilityError('ImagePicker', 'launchCameraAsync');\n  }\n  const mappedOptions = mapDeprecatedOptions(options);\n  return await ExponentImagePicker.launchCameraAsync(validateOptions(mappedOptions));\n}\n\n// @needsAudit\n/**\n * Display the system UI for choosing an image or a video from the phone's library.\n * Requires `Permissions.MEDIA_LIBRARY` on iOS 10 only. On mobile web, this must be     called\n * immediately in a user interaction like a button press, otherwise the browser will block the\n * request without a warning.\n *\n * **Animated GIFs support:** On Android, if the selected image is an animated GIF, the result image will be an\n * animated GIF too if and only if `quality` is explicitly set to `1.0` and `allowsEditing` is set to `false`.\n * Otherwise compression and/or cropper will pick the first frame of the GIF and return it as the\n * result (on Android the result will be a PNG). On iOS, both quality and cropping are supported.\n *\n * > **Notes for Web:** The system UI can only be shown after user activation (e.g. a `Button` press).\n * Therefore, calling `launchImageLibraryAsync` in `componentDidMount`, for example, will **not**\n * work as intended. The `cancelled` event will not be returned in the browser due to platform\n * restrictions and inconsistencies across browsers.\n * @param options An object extended by [`ImagePickerOptions`](#imagepickeroptions).\n * @return A promise that resolves to an object with `canceled` and `assets` fields.\n * When the user canceled the action the `assets` is always `null`, otherwise it's an array of\n * the selected media assets which have a form of [`ImagePickerAsset`](#imagepickerasset).\n */\nexport async function launchImageLibraryAsync(\n  options: ImagePickerOptions = {}\n): Promise<ImagePickerResult> {\n  const mappedOptions = mapDeprecatedOptions(options);\n\n  if (!ExponentImagePicker.launchImageLibraryAsync) {\n    throw new UnavailabilityError('ImagePicker', 'launchImageLibraryAsync');\n  }\n  if (mappedOptions?.allowsEditing && mappedOptions.allowsMultipleSelection) {\n    console.warn(\n      '[expo-image-picker] `allowsEditing` is not supported when `allowsMultipleSelection` is enabled and will be ignored.' +\n        \"Disable either 'allowsEditing' or 'allowsMultipleSelection' in 'launchImageLibraryAsync' \" +\n        'to fix this warning.'\n    );\n  }\n  return await ExponentImagePicker.launchImageLibraryAsync(mappedOptions);\n}\n\nexport * from './ImagePicker.types';\n\nexport type { PermissionExpiration, PermissionHookOptions, PermissionResponse };\nexport { PermissionStatus };\n","/**\n * Copyright (c) Nicolas Gallagher.\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\nvar Platform = {\n  OS: 'web',\n  select: obj => 'web' in obj ? obj.web : obj.default,\n  get isTesting() {\n    if (process.env.NODE_ENV === 'test') {\n      return true;\n    }\n    return false;\n  }\n};\nexport default Platform;"],"names":["CodedError","Error","constructor","code","message","super","this","_excluded","createPermissionHook","methods","options","isMounted","useRef","status","setStatus","useState","_ref","get","request","permissionOptions","_objectWithoutPropertiesLoose","getPermission","useCallback","async","response","getMethod","Object","keys","length","undefined","current","requestPermission","requestMethod","useEffect","usePermission","UnavailabilityError","moduleName","propertyName","PermissionStatus","isDOMAvailable","window","document","createElement","canUseEventListeners","addEventListener","attachEvent","canUseViewport","screen","OS","select","ReactNativePlatform","specifics","hasOwnProperty","default","isAsyncDebugging","MediaTypeOptions","VideoExportPreset","UIImagePickerControllerQualityType","UIImagePickerPresentationStyle","UIImagePickerPreferredAssetRepresentationMode","CameraType","parseMediaTypes","mediaTypes","mediaTypeOptionsToMediaType","Images","Videos","All","console","warn","mapDeprecatedOptions","assign","MediaTypeInput","images","videos","livePhotos","launchImageLibraryAsync","allowsMultipleSelection","base64","Platform","openFileBrowserAsync","canceled","assets","launchCameraAsync","cameraType","capture","getCameraPermissionsAsync","permissionGrantedResponse","requestCameraPermissionsAsync","getMediaLibraryPermissionsAsync","_writeOnly","requestMediaLibraryPermissionsAsync","GRANTED","expires","granted","canAskAgain","mediaTypeFormat","filteredMediaTypes","filter","mediaType","result","includes","concat","createMediaTypeFormat","input","style","display","setAttribute","String","Math","random","front","back","body","appendChild","Promise","resolve","files","all","Array","from","map","file","readFile","targetFile","reject","reader","FileReader","onerror","onload","target","uri","returnRaw","width","height","returnMediaData","data","substr","indexOf","type","startsWith","image","Image","src","naturalWidth","naturalHeight","mimeType","fileName","name","fileSize","size","video","preload","onloadedmetadata","videoWidth","videoHeight","duration","readAsDataURL","removeChild","dispatchEvent","Event","event","MouseEvent","ExponentImagePicker","writeOnly","imagePickerMethod","useMediaLibraryPermissions","useCameraPermissions","getPendingResultAsync","mappedOptions","aspect","quality","videoMaxDuration","x","y","validateOptions","allowsEditing","obj","web","isTesting"],"sourceRoot":""}