{"ast":null,"code":"import { includes } from 'lodash';\nimport XDate from 'xdate';\nimport React, { useRef, useState, useCallback, useMemo } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport { sameMonth } from '../../dateutils';\nimport { xdateToData } from '../../interface';\nimport { useDidUpdate } from '../../hooks';\nimport { UpdateSources } from '../commons';\nimport styleConstructor from '../style';\nimport CalendarContext from './index';\nimport TodayButton from './todayButton';\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nconst CalendarProvider = props => {\n  const {\n    theme,\n    date,\n    onDateChanged,\n    onMonthChange,\n    disableAutoDaySelection,\n    showTodayButton = false,\n    disabledOpacity,\n    todayBottomMargin,\n    todayButtonStyle,\n    style: propsStyle,\n    numberOfDays,\n    timelineLeftInset = 72,\n    children\n  } = props;\n  const style = useRef(styleConstructor(theme));\n  const todayButton = useRef();\n  const prevDate = useRef(date);\n  const currDate = useRef(date);\n  const [currentDate, setCurrentDate] = useState(date);\n  const [selectedDate, setSelectedDate] = useState(date);\n  const [updateSource, setUpdateSource] = useState(UpdateSources.CALENDAR_INIT);\n  const wrapperStyle = useMemo(() => {\n    return [style.current.contextWrapper, propsStyle];\n  }, [style, propsStyle]);\n  useDidUpdate(() => {\n    if (date && date !== currentDate) {\n      _setDate(date, UpdateSources.PROP_UPDATE);\n    }\n  }, [date]);\n  const getUpdateSource = useCallback(updateSource => {\n    if (updateSource === UpdateSources.ARROW_PRESS || updateSource === UpdateSources.WEEK_ARROW_PRESS) {\n      return UpdateSources.PAGE_SCROLL;\n    }\n    return updateSource;\n  }, []);\n  const _setDate = useCallback((date, updateSource) => {\n    prevDate.current = currDate.current;\n    currDate.current = date;\n    setCurrentDate(date);\n    if (!includes(disableAutoDaySelection, updateSource)) {\n      setSelectedDate(date);\n    }\n    setUpdateSource(updateSource);\n    const _updateSource = getUpdateSource(updateSource);\n    onDateChanged?.(date, _updateSource);\n    if (!sameMonth(new XDate(date), new XDate(prevDate.current))) {\n      onMonthChange?.(xdateToData(new XDate(date)), _updateSource);\n    }\n  }, [onDateChanged, onMonthChange, getUpdateSource]);\n  const _setDisabled = useCallback(disabled => {\n    if (showTodayButton) {\n      todayButton.current?.disable(disabled);\n    }\n  }, [showTodayButton]);\n  const contextValue = useMemo(() => {\n    return {\n      date: currentDate,\n      prevDate: prevDate.current,\n      selectedDate,\n      updateSource: updateSource,\n      setDate: _setDate,\n      setDisabled: _setDisabled,\n      numberOfDays,\n      timelineLeftInset\n    };\n  }, [currentDate, updateSource, numberOfDays, _setDisabled]);\n  const renderTodayButton = () => {\n    return _jsx(TodayButton, {\n      ref: todayButton,\n      disabledOpacity: disabledOpacity,\n      margin: todayBottomMargin,\n      style: todayButtonStyle,\n      theme: theme\n    });\n  };\n  return _jsxs(CalendarContext.Provider, {\n    value: contextValue,\n    children: [_jsx(View, {\n      style: wrapperStyle,\n      children: children\n    }, numberOfDays), showTodayButton && renderTodayButton()]\n  });\n};\nexport default CalendarProvider;\nCalendarProvider.displayName = 'CalendarProvider';","map":{"version":3,"names":["includes","XDate","React","useRef","useState","useCallback","useMemo","View","sameMonth","xdateToData","useDidUpdate","UpdateSources","styleConstructor","CalendarContext","TodayButton","jsx","_jsx","jsxs","_jsxs","CalendarProvider","props","theme","date","onDateChanged","onMonthChange","disableAutoDaySelection","showTodayButton","disabledOpacity","todayBottomMargin","todayButtonStyle","style","propsStyle","numberOfDays","timelineLeftInset","children","todayButton","prevDate","currDate","currentDate","setCurrentDate","selectedDate","setSelectedDate","updateSource","setUpdateSource","CALENDAR_INIT","wrapperStyle","current","contextWrapper","_setDate","PROP_UPDATE","getUpdateSource","ARROW_PRESS","WEEK_ARROW_PRESS","PAGE_SCROLL","_updateSource","_setDisabled","disabled","disable","contextValue","setDate","setDisabled","renderTodayButton","ref","margin","Provider","value","displayName"],"sources":["C:/Users/chaud/radha-counter/node_modules/react-native-calendars/src/expandableCalendar/Context/Provider.js"],"sourcesContent":["import { includes } from 'lodash';\nimport XDate from 'xdate';\nimport React, { useRef, useState, useCallback, useMemo } from 'react';\nimport { View } from 'react-native';\nimport { sameMonth } from '../../dateutils';\nimport { xdateToData } from '../../interface';\nimport { useDidUpdate } from '../../hooks';\nimport { UpdateSources } from '../commons';\nimport styleConstructor from '../style';\nimport CalendarContext from './index';\nimport TodayButton from './todayButton';\n/**\n * @description: Calendar context provider component\n * @example: https://github.com/wix/react-native-calendars/blob/master/example/src/screens/expandableCalendar.js\n */\nconst CalendarProvider = (props) => {\n    const { theme, date, onDateChanged, onMonthChange, disableAutoDaySelection, showTodayButton = false, disabledOpacity, todayBottomMargin, todayButtonStyle, style: propsStyle, numberOfDays, timelineLeftInset = 72, children } = props;\n    const style = useRef(styleConstructor(theme));\n    const todayButton = useRef();\n    const prevDate = useRef(date);\n    const currDate = useRef(date); // for setDate only to keep prevDate up to date\n    const [currentDate, setCurrentDate] = useState(date);\n    const [selectedDate, setSelectedDate] = useState(date);\n    const [updateSource, setUpdateSource] = useState(UpdateSources.CALENDAR_INIT);\n    const wrapperStyle = useMemo(() => {\n        return [style.current.contextWrapper, propsStyle];\n    }, [style, propsStyle]);\n    useDidUpdate(() => {\n        if (date && date !== currentDate) {\n            _setDate(date, UpdateSources.PROP_UPDATE);\n        }\n    }, [date]);\n    const getUpdateSource = useCallback((updateSource) => {\n        // NOTE: this comes to avoid breaking those how listen to the update source in onDateChanged and onMonthChange - remove on V2\n        if (updateSource === UpdateSources.ARROW_PRESS || updateSource === UpdateSources.WEEK_ARROW_PRESS) {\n            return UpdateSources.PAGE_SCROLL;\n        }\n        return updateSource;\n    }, []);\n    const _setDate = useCallback((date, updateSource) => {\n        prevDate.current = currDate.current;\n        currDate.current = date;\n        setCurrentDate(date);\n        if (!includes(disableAutoDaySelection, updateSource)) {\n            setSelectedDate(date);\n        }\n        setUpdateSource(updateSource);\n        const _updateSource = getUpdateSource(updateSource);\n        onDateChanged?.(date, _updateSource);\n        if (!sameMonth(new XDate(date), new XDate(prevDate.current))) {\n            onMonthChange?.(xdateToData(new XDate(date)), _updateSource);\n        }\n    }, [onDateChanged, onMonthChange, getUpdateSource]);\n    const _setDisabled = useCallback((disabled) => {\n        if (showTodayButton) {\n            todayButton.current?.disable(disabled);\n        }\n    }, [showTodayButton]);\n    const contextValue = useMemo(() => {\n        return {\n            date: currentDate,\n            prevDate: prevDate.current,\n            selectedDate,\n            updateSource: updateSource,\n            setDate: _setDate,\n            setDisabled: _setDisabled,\n            numberOfDays,\n            timelineLeftInset\n        };\n    }, [currentDate, updateSource, numberOfDays, _setDisabled]);\n    const renderTodayButton = () => {\n        return (<TodayButton ref={todayButton} disabledOpacity={disabledOpacity} margin={todayBottomMargin} style={todayButtonStyle} theme={theme}/>);\n    };\n    return (<CalendarContext.Provider value={contextValue}>\n      <View style={wrapperStyle} key={numberOfDays}>{children}</View>\n      {showTodayButton && renderTodayButton()}\n    </CalendarContext.Provider>);\n};\nexport default CalendarProvider;\nCalendarProvider.displayName = 'CalendarProvider';\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}