{"ast":null,"code":"import { MediaTypeOptions } from './ImagePicker.types';\nexport function parseMediaTypes(mediaTypes) {\n  const mediaTypeOptionsToMediaType = {\n    Images: ['images'],\n    Videos: ['videos'],\n    All: ['images', 'videos']\n  };\n  if (mediaTypes === MediaTypeOptions.Images || mediaTypes === MediaTypeOptions.Videos || mediaTypes === MediaTypeOptions.All) {\n    console.warn('[expo-image-picker] `ImagePicker.MediaTypeOptions` have been deprecated. Use `ImagePicker.MediaType` or an array of `ImagePicker.MediaType` instead.');\n    return mediaTypeOptionsToMediaType[mediaTypes];\n  }\n  if (typeof mediaTypes === 'string') {\n    return [mediaTypes];\n  }\n  return mediaTypes;\n}\nexport function mapDeprecatedOptions(options) {\n  if (!options.mediaTypes) {\n    return options;\n  }\n  return Object.assign({}, options, {\n    mediaTypes: parseMediaTypes(options.mediaTypes ?? [])\n  });\n}","map":{"version":3,"names":["MediaTypeOptions","parseMediaTypes","mediaTypes","mediaTypeOptionsToMediaType","Images","Videos","All","console","warn","mapDeprecatedOptions","options","Object","assign"],"sources":["C:\\Users\\chaud\\radha-counter\\node_modules\\expo-image-picker\\src\\utils.ts"],"sourcesContent":["// @hidden\nimport { ImagePickerOptions, MediaType, MediaTypeOptions } from './ImagePicker.types';\n\nexport function parseMediaTypes(\n  mediaTypes: MediaTypeOptions | MediaType | MediaType[]\n): MediaType[] {\n  const mediaTypeOptionsToMediaType: Record<MediaTypeOptions, MediaType[]> = {\n    Images: ['images'],\n    Videos: ['videos'],\n    All: ['images', 'videos'],\n  };\n\n  if (\n    mediaTypes === MediaTypeOptions.Images ||\n    mediaTypes === MediaTypeOptions.Videos ||\n    mediaTypes === MediaTypeOptions.All\n  ) {\n    console.warn(\n      '[expo-image-picker] `ImagePicker.MediaTypeOptions` have been deprecated. Use `ImagePicker.MediaType` or an array of `ImagePicker.MediaType` instead.'\n    );\n    return mediaTypeOptionsToMediaType[mediaTypes];\n  }\n  // Unlike iOS, Android can't auto-cast to array\n  if (typeof mediaTypes === 'string') {\n    return [mediaTypes];\n  }\n  return mediaTypes;\n}\n\n// We deprecated the MediaTypeOptions in SDK52, we should remove it in future release.\nexport function mapDeprecatedOptions(options: ImagePickerOptions) {\n  if (!options.mediaTypes) {\n    return options;\n  }\n  return { ...options, mediaTypes: parseMediaTypes(options.mediaTypes ?? []) };\n}\n"],"mappings":"AACA,SAAwCA,gBAAgB,QAAQ,qBAAqB;AAErF,OAAM,SAAUC,eAAeA,CAC7BC,UAAsD;EAEtD,MAAMC,2BAA2B,GAA0C;IACzEC,MAAM,EAAE,CAAC,QAAQ,CAAC;IAClBC,MAAM,EAAE,CAAC,QAAQ,CAAC;IAClBC,GAAG,EAAE,CAAC,QAAQ,EAAE,QAAQ;GACzB;EAED,IACEJ,UAAU,KAAKF,gBAAgB,CAACI,MAAM,IACtCF,UAAU,KAAKF,gBAAgB,CAACK,MAAM,IACtCH,UAAU,KAAKF,gBAAgB,CAACM,GAAG,EACnC;IACAC,OAAO,CAACC,IAAI,CACV,sJAAsJ,CACvJ;IACD,OAAOL,2BAA2B,CAACD,UAAU,CAAC;EAChD;EAEA,IAAI,OAAOA,UAAU,KAAK,QAAQ,EAAE;IAClC,OAAO,CAACA,UAAU,CAAC;EACrB;EACA,OAAOA,UAAU;AACnB;AAGA,OAAM,SAAUO,oBAAoBA,CAACC,OAA2B;EAC9D,IAAI,CAACA,OAAO,CAACR,UAAU,EAAE;IACvB,OAAOQ,OAAO;EAChB;EACA,OAAAC,MAAA,CAAAC,MAAA,KAAYF,OAAO;IAAER,UAAU,EAAED,eAAe,CAACS,OAAO,CAACR,UAAU,IAAI,EAAE;EAAC;AAC5E","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}