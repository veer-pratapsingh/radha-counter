{"ast":null,"code":"export {};","map":{"version":3,"names":[],"sources":["C:/Users/chaud/radha-counter/node_modules/expo-modules-core/src/ts-declarations/global.ts"],"sourcesContent":["import type { EventEmitter } from './EventEmitter';\nimport type { NativeModule } from './NativeModule';\nimport type { SharedObject } from './SharedObject';\nimport type { SharedRef } from './SharedRef';\n\nexport interface ExpoGlobal {\n  /**\n   * Host object that is used to access native Expo modules.\n   */\n  modules: Record<string, any>;\n\n  // Natively defined JS classes\n\n  /**\n   * @see EventEmitter\n   */\n  EventEmitter: typeof EventEmitter;\n\n  /**\n   * @see SharedObject\n   */\n  SharedObject: typeof SharedObject;\n\n  /**\n   * @see SharedRef\n   */\n  SharedRef: typeof SharedRef;\n\n  /**\n   * @see NativeModule\n   */\n  NativeModule: typeof NativeModule;\n\n  // Properties\n\n  /**\n   * The version of the `expo-modules-core` package.\n   * @platform android\n   * @platform ios\n   */\n  expoModulesCoreVersion?: {\n    version: string;\n    major: number;\n    minor: number;\n    patch: number;\n  };\n\n  /**\n   * The path to the cache directory\n   * @platform android\n   * @platform ios\n   */\n  cacheDir?: string;\n\n  /**\n   * The path to the documents directory\n   * @platform android\n   * @platform ios\n   */\n  documentsDir?: string;\n\n  // Utils\n\n  /**\n   * Generates a random UUID v4 string.\n   */\n  uuidv4(): string;\n\n  /**\n   * Generates a UUID v5 string representation of the value in the specified namespace.\n   */\n  uuidv5(name: string, namespace: string): string;\n\n  /**\n   * Returns a static view config of the native view with the given name\n   * or `null` if the view has not been registered.\n   */\n  getViewConfig(moduleName: string, viewName?: string): ViewConfig | null;\n\n  /**\n   * Reloads the app.\n   */\n  reloadAppAsync(reason: string): Promise<void>;\n}\n\ntype ViewConfig = {\n  validAttributes: Record<string, any>;\n  directEventTypes: Record<string, { registrationName: string }>;\n};\n\nexport interface ExpoProcessEnv {\n  NODE_ENV: string;\n  /** Used in `@expo/metro-runtime`. */\n  EXPO_DEV_SERVER_ORIGIN?: string;\n\n  EXPO_ROUTER_IMPORT_MODE?: string;\n  EXPO_ROUTER_ABS_APP_ROOT?: string;\n  EXPO_ROUTER_APP_ROOT?: string;\n\n  /** Maps to the `experiments.baseUrl` property in the project Expo config. This is injected by `babel-preset-expo` and supports automatic cache invalidation. */\n  EXPO_BASE_URL?: string;\n\n  /** Build-time representation of the `Platform.OS` value that the current JavaScript was bundled for. Does not support platform shaking wrapped require statements. */\n  EXPO_OS?: string;\n\n  [key: string]: any;\n}\n\nexport interface ExpoProcess {\n  env: ExpoProcessEnv;\n  [key: string]: any;\n}\n\n/* eslint-disable no-var */\n\ndeclare global {\n  namespace NodeJS {\n    export interface ProcessEnv extends ExpoProcessEnv {}\n    export interface Process extends ExpoProcess {\n      env: ProcessEnv;\n    }\n  }\n\n  /**\n   * Global object containing all the native bindings installed by Expo.\n   * This object is not available in projects without the `expo` package installed.\n   */\n  var expo: ExpoGlobal;\n\n  var process: NodeJS.Process;\n\n  /**\n   * ExpoDomWebView is defined in `@expo/dom-webview` runtime.\n   */\n  var ExpoDomWebView: Record<string, any> | undefined;\n}\n"],"mappings":"","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}