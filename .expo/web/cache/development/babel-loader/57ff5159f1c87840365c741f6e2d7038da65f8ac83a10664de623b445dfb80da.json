{"ast":null,"code":"import invariant from 'invariant';\nimport NativeEventEmitter from \"react-native-web/dist/exports/NativeEventEmitter\";\nimport NativeModules from \"react-native-web/dist/exports/NativeModules\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nconst nativeEmitterSubscriptionKey = '@@nativeEmitterSubscription@@';\nexport class EventEmitter {\n  _listenerCount = 0;\n  constructor(nativeModule) {\n    if (nativeModule.__expo_module_name__ && NativeModules.EXReactNativeEventEmitter) {\n      nativeModule.addListener = (...args) => NativeModules.EXReactNativeEventEmitter.addProxiedListener(nativeModule.__expo_module_name__, ...args);\n      nativeModule.removeListeners = (...args) => NativeModules.EXReactNativeEventEmitter.removeProxiedListeners(nativeModule.__expo_module_name__, ...args);\n    }\n    this._nativeModule = nativeModule;\n    this._eventEmitter = new NativeEventEmitter(nativeModule);\n  }\n  addListener(eventName, listener) {\n    if (!this._listenerCount && true && this._nativeModule.startObserving) {\n      this._nativeModule.startObserving();\n    }\n    this._listenerCount++;\n    const nativeEmitterSubscription = this._eventEmitter.addListener(eventName, listener);\n    const subscription = {\n      [nativeEmitterSubscriptionKey]: nativeEmitterSubscription,\n      remove: () => {\n        this.removeSubscription(subscription);\n      }\n    };\n    return subscription;\n  }\n  removeAllListeners(eventName) {\n    const removedListenerCount = this._eventEmitter.listenerCount ? this._eventEmitter.listenerCount(eventName) : this._eventEmitter.listeners(eventName).length;\n    this._eventEmitter.removeAllListeners(eventName);\n    this._listenerCount -= removedListenerCount;\n    invariant(this._listenerCount >= 0, `EventEmitter must have a non-negative number of listeners`);\n    if (!this._listenerCount && true && this._nativeModule.stopObserving) {\n      this._nativeModule.stopObserving();\n    }\n  }\n  removeSubscription(subscription) {\n    const nativeEmitterSubscription = subscription[nativeEmitterSubscriptionKey];\n    if (!nativeEmitterSubscription) {\n      return;\n    }\n    if ('remove' in nativeEmitterSubscription) {\n      nativeEmitterSubscription.remove();\n    }\n    this._listenerCount--;\n    delete subscription[nativeEmitterSubscriptionKey];\n    subscription.remove = () => {};\n    if (!this._listenerCount && true && this._nativeModule.stopObserving) {\n      this._nativeModule.stopObserving();\n    }\n  }\n  emit(eventName, ...params) {\n    this._eventEmitter.emit(eventName, ...params);\n  }\n}","map":{"version":3,"names":["invariant","NativeEventEmitter","NativeModules","Platform","nativeEmitterSubscriptionKey","EventEmitter","_listenerCount","constructor","nativeModule","__expo_module_name__","EXReactNativeEventEmitter","addListener","args","addProxiedListener","removeListeners","removeProxiedListeners","_nativeModule","_eventEmitter","eventName","listener","startObserving","nativeEmitterSubscription","subscription","remove","removeSubscription","removeAllListeners","removedListenerCount","listenerCount","listeners","length","stopObserving","emit","params"],"sources":["C:/Users/chaud/radha-counter/node_modules/expo-modules-core/src/EventEmitter.ts"],"sourcesContent":["import invariant from 'invariant';\nimport { NativeEventEmitter, NativeModules, Platform } from 'react-native';\n\nconst nativeEmitterSubscriptionKey = '@@nativeEmitterSubscription@@';\n\ntype NativeModule = {\n  __expo_module_name__?: string;\n  startObserving?: () => void;\n  stopObserving?: () => void;\n  addListener: (eventName: string) => void;\n  removeListeners: (count: number) => void;\n};\n\n// @needsAudit\nexport type Subscription = {\n  /**\n   * A method to unsubscribe the listener.\n   */\n  remove: () => void;\n};\n\nexport class EventEmitter {\n  _listenerCount = 0;\n  _nativeModule: NativeModule;\n  _eventEmitter: NativeEventEmitter;\n\n  constructor(nativeModule: NativeModule) {\n    // Expo modules installed through the JSI don't have `addListener` and `removeListeners` set,\n    // so if someone wants to use them with `EventEmitter`, make sure to provide these functions\n    // as they are required by `NativeEventEmitter`. This is only temporary â€” in the future\n    // JSI modules will have event emitter built in.\n    if (nativeModule.__expo_module_name__ && NativeModules.EXReactNativeEventEmitter) {\n      nativeModule.addListener = (...args) =>\n        NativeModules.EXReactNativeEventEmitter.addProxiedListener(\n          nativeModule.__expo_module_name__,\n          ...args\n        );\n      nativeModule.removeListeners = (...args) =>\n        NativeModules.EXReactNativeEventEmitter.removeProxiedListeners(\n          nativeModule.__expo_module_name__,\n          ...args\n        );\n    }\n    this._nativeModule = nativeModule;\n    this._eventEmitter = new NativeEventEmitter(nativeModule as any);\n  }\n\n  addListener<T>(eventName: string, listener: (event: T) => void): Subscription {\n    if (!this._listenerCount && Platform.OS !== 'ios' && this._nativeModule.startObserving) {\n      this._nativeModule.startObserving();\n    }\n\n    this._listenerCount++;\n    const nativeEmitterSubscription = this._eventEmitter.addListener(eventName, listener);\n    const subscription = {\n      [nativeEmitterSubscriptionKey]: nativeEmitterSubscription,\n      remove: () => {\n        this.removeSubscription(subscription);\n      },\n    };\n    return subscription;\n  }\n\n  removeAllListeners(eventName: string): void {\n    // @ts-ignore: the EventEmitter interface has been changed in react-native@0.64.0\n    const removedListenerCount = this._eventEmitter.listenerCount\n      ? // @ts-ignore: this is available since 0.64\n        this._eventEmitter.listenerCount(eventName)\n      : // @ts-ignore: this is available in older versions\n        this._eventEmitter.listeners(eventName).length;\n    this._eventEmitter.removeAllListeners(eventName);\n    this._listenerCount -= removedListenerCount;\n    invariant(\n      this._listenerCount >= 0,\n      `EventEmitter must have a non-negative number of listeners`\n    );\n\n    if (!this._listenerCount && Platform.OS !== 'ios' && this._nativeModule.stopObserving) {\n      this._nativeModule.stopObserving();\n    }\n  }\n\n  removeSubscription(subscription: Subscription): void {\n    const nativeEmitterSubscription = subscription[nativeEmitterSubscriptionKey];\n    if (!nativeEmitterSubscription) {\n      return;\n    }\n\n    if ('remove' in nativeEmitterSubscription) {\n      nativeEmitterSubscription.remove();\n    }\n    this._listenerCount--;\n\n    // Ensure that the emitter's internal state remains correct even if `removeSubscription` is\n    // called again with the same subscription\n    delete subscription[nativeEmitterSubscriptionKey];\n\n    // Release closed-over references to the emitter\n    subscription.remove = () => {};\n\n    if (!this._listenerCount && Platform.OS !== 'ios' && this._nativeModule.stopObserving) {\n      this._nativeModule.stopObserving();\n    }\n  }\n\n  emit(eventName: string, ...params: any[]): void {\n    this._eventEmitter.emit(eventName, ...params);\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}