{"ast":null,"code":"import{MediaTypeOptions}from'./ImagePicker.types';export function parseMediaTypes(mediaTypes){const mediaTypeOptionsToMediaType={Images:['images'],Videos:['videos'],All:['images','videos']};if(mediaTypes===MediaTypeOptions.Images||mediaTypes===MediaTypeOptions.Videos||mediaTypes===MediaTypeOptions.All){console.warn('[expo-image-picker] `ImagePicker.MediaTypeOptions` have been deprecated. Use `ImagePicker.MediaType` or an array of `ImagePicker.MediaType` instead.');return mediaTypeOptionsToMediaType[mediaTypes];}if(typeof mediaTypes==='string'){return[mediaTypes];}return mediaTypes;}export function mapDeprecatedOptions(options){if(!options.mediaTypes){return options;}return Object.assign({},options,{mediaTypes:parseMediaTypes(options.mediaTypes??[])});}","map":{"version":3,"names":["MediaTypeOptions","parseMediaTypes","mediaTypes","mediaTypeOptionsToMediaType","Images","Videos","All","console","warn","mapDeprecatedOptions","options","Object","assign"],"sources":["C:\\Users\\chaud\\radha-counter\\node_modules\\expo-image-picker\\src\\utils.ts"],"sourcesContent":["// @hidden\nimport { ImagePickerOptions, MediaType, MediaTypeOptions } from './ImagePicker.types';\n\nexport function parseMediaTypes(\n  mediaTypes: MediaTypeOptions | MediaType | MediaType[]\n): MediaType[] {\n  const mediaTypeOptionsToMediaType: Record<MediaTypeOptions, MediaType[]> = {\n    Images: ['images'],\n    Videos: ['videos'],\n    All: ['images', 'videos'],\n  };\n\n  if (\n    mediaTypes === MediaTypeOptions.Images ||\n    mediaTypes === MediaTypeOptions.Videos ||\n    mediaTypes === MediaTypeOptions.All\n  ) {\n    console.warn(\n      '[expo-image-picker] `ImagePicker.MediaTypeOptions` have been deprecated. Use `ImagePicker.MediaType` or an array of `ImagePicker.MediaType` instead.'\n    );\n    return mediaTypeOptionsToMediaType[mediaTypes];\n  }\n  // Unlike iOS, Android can't auto-cast to array\n  if (typeof mediaTypes === 'string') {\n    return [mediaTypes];\n  }\n  return mediaTypes;\n}\n\n// We deprecated the MediaTypeOptions in SDK52, we should remove it in future release.\nexport function mapDeprecatedOptions(options: ImagePickerOptions) {\n  if (!options.mediaTypes) {\n    return options;\n  }\n  return { ...options, mediaTypes: parseMediaTypes(options.mediaTypes ?? []) };\n}\n"],"mappings":"AACA,OAAwCA,gBAAgB,KAAQ,qBAAqB,CAErF,MAAM,SAAU,CAAAC,eAAeA,CAC7BC,UAAsD,EAEtD,KAAM,CAAAC,2BAA2B,CAA0C,CACzEC,MAAM,CAAE,CAAC,QAAQ,CAAC,CAClBC,MAAM,CAAE,CAAC,QAAQ,CAAC,CAClBC,GAAG,CAAE,CAAC,QAAQ,CAAE,QAAQ,C,CACzB,CAED,GACEJ,UAAU,GAAKF,gBAAgB,CAACI,MAAM,EACtCF,UAAU,GAAKF,gBAAgB,CAACK,MAAM,EACtCH,UAAU,GAAKF,gBAAgB,CAACM,GAAG,CACnC,CACAC,OAAO,CAACC,IAAI,CACV,sJAAsJ,CACvJ,CACD,MAAO,CAAAL,2BAA2B,CAACD,UAAU,CAAC,CAChD,CAEA,GAAI,MAAO,CAAAA,UAAU,GAAK,QAAQ,CAAE,CAClC,MAAO,CAACA,UAAU,CAAC,CACrB,CACA,MAAO,CAAAA,UAAU,CACnB,CAGA,MAAM,SAAU,CAAAO,oBAAoBA,CAACC,OAA2B,EAC9D,GAAI,CAACA,OAAO,CAACR,UAAU,CAAE,CACvB,MAAO,CAAAQ,OAAO,CAChB,CACA,OAAAC,MAAA,CAAAC,MAAA,IAAYF,OAAO,EAAER,UAAU,CAAED,eAAe,CAACS,OAAO,CAACR,UAAU,EAAI,EAAE,CAAC,GAC5E","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}