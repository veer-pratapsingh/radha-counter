{"ast":null,"code":"import{useEffect,useRef,useState}from'react';export function useEvent(eventEmitter,eventName,initialValue=null){const[event,setEvent]=useState(initialValue);const listener=event=>setEvent(event);useEventListener(eventEmitter,eventName,listener);return event;}export function useEventListener(eventEmitter,eventName,listener){const listenerRef=useRef(listener);listenerRef.current=listener;useEffect(()=>{const callback=(...args)=>listenerRef.current(...args);const subscription=eventEmitter.addListener(eventName,callback);return()=>subscription.remove();},[eventEmitter,eventName,listenerRef]);}","map":{"version":3,"names":["useEffect","useRef","useState","useEvent","eventEmitter","eventName","initialValue","event","setEvent","listener","useEventListener","listenerRef","current","callback","args","subscription","addListener","remove"],"sources":["C:/Users/chaud/radha-counter/node_modules/expo/src/hooks/useEvent.ts"],"sourcesContent":["import type { EventEmitter } from 'expo-modules-core/types';\nimport { useEffect, useRef, useState } from 'react';\n\ntype AnyEventListener = (...args: any[]) => any;\n\n/**\n * Type helper that infers the event name from the emitter's events map.\n */\ntype InferEventName<TEventsMap> =\n  TEventsMap extends Record<infer TEventName extends keyof TEventsMap, AnyEventListener>\n    ? TEventName\n    : never;\n\n/**\n * Type helper that infers the event listener from the emitter's events map.\n */\ntype InferEventListener<TEventsMap, TEventName extends keyof TEventsMap> =\n  TEventsMap extends Record<TEventName, infer TEventListener extends AnyEventListener>\n    ? TEventListener\n    : never;\n\n/**\n * Type helper that infers the first parameter of the event listener.\n */\ntype InferEventParameter<\n  TEventListener extends AnyEventListener,\n  TInitialValue,\n> = TInitialValue extends Parameters<TEventListener>[0]\n  ? Parameters<TEventListener>[0]\n  : Parameters<TEventListener>[0] | TInitialValue | null;\n\n/**\n * React hook that listens to events emitted by the given object. The returned value is an event parameter\n * that gets updated whenever a new event is dispatched.\n * @param eventEmitter An object that emits events. For example, a native module or shared object or an instance of [`EventEmitter`](#eventemitter).\n * @param eventName Name of the event to listen to.\n * @param initialValue An event parameter to use until the event is called for the first time.\n * @returns A parameter of the event listener.\n * @example\n * ```tsx\n * import { useEvent } from 'expo';\n * import { VideoPlayer } from 'expo-video';\n *\n * export function PlayerStatus({ videoPlayer }: { videoPlayer: VideoPlayer }) {\n *   const { status } = useEvent(videoPlayer, 'statusChange', { status: videoPlayer.status });\n *\n *   return <Text>{`Player status: ${status}`}</Text>;\n * }\n * ```\n */\nexport function useEvent<\n  TEventsMap extends Record<string, AnyEventListener>,\n  TEventName extends InferEventName<TEventsMap>,\n  TEventListener extends InferEventListener<TEventsMap, TEventName>,\n  TInitialValue extends Parameters<TEventListener>[0] | null,\n>(\n  eventEmitter: EventEmitter<TEventsMap>,\n  eventName: TEventName,\n  initialValue: TInitialValue | null = null\n): InferEventParameter<TEventListener, TInitialValue> {\n  const [event, setEvent] = useState<Parameters<TEventListener>[0] | TInitialValue | null>(\n    initialValue\n  );\n  const listener = (event: Parameters<TEventListener>[0]) => setEvent(event);\n\n  useEventListener(eventEmitter, eventName, listener as InferEventListener<TEventsMap, TEventName>);\n\n  return event as InferEventParameter<TEventListener, TInitialValue>;\n}\n\n/**\n * React hook that listens to events emitted by the given object and calls the listener function whenever a new event is dispatched.\n * The event listener is automatically added during the first render and removed when the component unmounts.\n * @param eventEmitter An object that emits events. For example, a native module or shared object or an instance of [`EventEmitter`](#eventemitter).\n * @param eventName Name of the event to listen to.\n * @param listener A function to call when the event is dispatched.\n * @example\n * ```tsx\n * import { useEventListener } from 'expo';\n * import { useVideoPlayer, VideoView } from 'expo-video';\n *\n * export function VideoPlayerView() {\n *   const player = useVideoPlayer(videoSource);\n *\n *   useEventListener(player, 'playingChange', ({ isPlaying }) => {\n *     console.log('Player is playing:', isPlaying);\n *   });\n *\n *   return <VideoView player={player} />;\n * }\n * ```\n */\nexport function useEventListener<\n  TEventsMap extends Record<string, AnyEventListener>,\n  TEventName extends InferEventName<TEventsMap>,\n  TEventListener extends InferEventListener<TEventsMap, TEventName>,\n>(eventEmitter: EventEmitter<TEventsMap>, eventName: TEventName, listener: TEventListener): void {\n  // Always use the most recent version of the listener inside the effect,\n  // without memoization so the listeners don't have to be swapped with every render.\n  const listenerRef = useRef<TEventListener>(listener);\n  listenerRef.current = listener;\n\n  useEffect(() => {\n    const callback = (...args: any[]) => listenerRef.current(...args);\n    const subscription = eventEmitter.addListener<TEventName>(\n      eventName,\n      callback as TEventsMap[TEventName]\n    );\n\n    return () => subscription.remove();\n  }, [eventEmitter, eventName, listenerRef]);\n}\n"],"mappings":"AACA,OAASA,SAAS,CAAEC,MAAM,CAAEC,QAAQ,KAAQ,OAAO,CAiDnD,MAAO,SAAS,CAAAC,QAAQA,CAMtBC,YAAsC,CACtCC,SAAqB,CACrBC,YAAkC,CAAG,IAAI,CACW,CACpD,KAAM,CAACC,KAAK,CAAEC,QAAQ,CAAC,CAAGN,QAAQ,CAChCI,YACF,CAAC,CACD,KAAM,CAAAG,QAAQ,CAAIF,KAAoC,EAAKC,QAAQ,CAACD,KAAK,CAAC,CAE1EG,gBAAgB,CAACN,YAAY,CAAEC,SAAS,CAAEI,QAAsD,CAAC,CAEjG,MAAO,CAAAF,KAAK,CACd,CAwBA,MAAO,SAAS,CAAAG,gBAAgBA,CAI9BN,YAAsC,CAAEC,SAAqB,CAAEI,QAAwB,CAAQ,CAG/F,KAAM,CAAAE,WAAW,CAAGV,MAAM,CAAiBQ,QAAQ,CAAC,CACpDE,WAAW,CAACC,OAAO,CAAGH,QAAQ,CAE9BT,SAAS,CAAC,IAAM,CACd,KAAM,CAAAa,QAAQ,CAAGA,CAAC,GAAGC,IAAW,GAAKH,WAAW,CAACC,OAAO,CAAC,GAAGE,IAAI,CAAC,CACjE,KAAM,CAAAC,YAAY,CAAGX,YAAY,CAACY,WAAW,CAC3CX,SAAS,CACTQ,QACF,CAAC,CAED,MAAO,IAAME,YAAY,CAACE,MAAM,CAAC,CAAC,CACpC,CAAC,CAAE,CAACb,YAAY,CAAEC,SAAS,CAAEM,WAAW,CAAC,CAAC,CAC5C","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}