{"ast":null,"code":"import{CodedError,createPermissionHook,PermissionStatus,UnavailabilityError}from'expo-modules-core';import ExponentImagePicker from'./ExponentImagePicker';import{mapDeprecatedOptions}from'./utils';function validateOptions(options){const{aspect,quality,videoMaxDuration}=options;if(aspect!=null){const[x,y]=aspect;if(x<=0||y<=0){throw new CodedError('ERR_INVALID_ARGUMENT',`Invalid aspect ratio values ${x}:${y}. Provide positive numbers.`);}}if(quality&&(quality<0||quality>1)){throw new CodedError('ERR_INVALID_ARGUMENT',`Invalid 'quality' value ${quality}. Provide a value between 0 and 1.`);}if(videoMaxDuration&&videoMaxDuration<0){throw new CodedError('ERR_INVALID_ARGUMENT',`Invalid 'videoMaxDuration' value ${videoMaxDuration}. Provide a non-negative number.`);}return options;}export async function getCameraPermissionsAsync(){return ExponentImagePicker.getCameraPermissionsAsync();}export async function getMediaLibraryPermissionsAsync(writeOnly=false){return ExponentImagePicker.getMediaLibraryPermissionsAsync(writeOnly);}export async function requestCameraPermissionsAsync(){return ExponentImagePicker.requestCameraPermissionsAsync();}export async function requestMediaLibraryPermissionsAsync(writeOnly=false){const imagePickerMethod=ExponentImagePicker.requestMediaLibraryPermissionsAsync;return imagePickerMethod(writeOnly);}export const useMediaLibraryPermissions=createPermissionHook({getMethod:options=>getMediaLibraryPermissionsAsync(options?.writeOnly),requestMethod:options=>requestMediaLibraryPermissionsAsync(options?.writeOnly)});export const useCameraPermissions=createPermissionHook({getMethod:getCameraPermissionsAsync,requestMethod:requestCameraPermissionsAsync});export async function getPendingResultAsync(){if(ExponentImagePicker.getPendingResultAsync){return ExponentImagePicker.getPendingResultAsync();}return null;}export async function launchCameraAsync(options={}){if(!ExponentImagePicker.launchCameraAsync){throw new UnavailabilityError('ImagePicker','launchCameraAsync');}const mappedOptions=mapDeprecatedOptions(options);return await ExponentImagePicker.launchCameraAsync(validateOptions(mappedOptions));}export async function launchImageLibraryAsync(options={}){const mappedOptions=mapDeprecatedOptions(options);if(!ExponentImagePicker.launchImageLibraryAsync){throw new UnavailabilityError('ImagePicker','launchImageLibraryAsync');}if(mappedOptions?.allowsEditing&&mappedOptions.allowsMultipleSelection){console.warn('[expo-image-picker] `allowsEditing` is not supported when `allowsMultipleSelection` is enabled and will be ignored.'+\"Disable either 'allowsEditing' or 'allowsMultipleSelection' in 'launchImageLibraryAsync' \"+'to fix this warning.');}return await ExponentImagePicker.launchImageLibraryAsync(mappedOptions);}export*from'./ImagePicker.types';export{PermissionStatus};","map":{"version":3,"names":["CodedError","createPermissionHook","PermissionStatus","UnavailabilityError","ExponentImagePicker","mapDeprecatedOptions","validateOptions","options","aspect","quality","videoMaxDuration","x","y","getCameraPermissionsAsync","getMediaLibraryPermissionsAsync","writeOnly","requestCameraPermissionsAsync","requestMediaLibraryPermissionsAsync","imagePickerMethod","useMediaLibraryPermissions","getMethod","requestMethod","useCameraPermissions","getPendingResultAsync","launchCameraAsync","mappedOptions","launchImageLibraryAsync","allowsEditing","allowsMultipleSelection","console","warn"],"sources":["C:\\Users\\chaud\\radha-counter\\node_modules\\expo-image-picker\\src\\ImagePicker.ts"],"sourcesContent":["import {\n  CodedError,\n  createPermissionHook,\n  PermissionExpiration,\n  PermissionHookOptions,\n  PermissionResponse,\n  PermissionStatus,\n  UnavailabilityError,\n} from 'expo-modules-core';\n\nimport ExponentImagePicker from './ExponentImagePicker';\nimport {\n  CameraPermissionResponse,\n  ImagePickerErrorResult,\n  ImagePickerOptions,\n  ImagePickerResult,\n  MediaLibraryPermissionResponse,\n} from './ImagePicker.types';\nimport { mapDeprecatedOptions } from './utils';\n\nfunction validateOptions(options: ImagePickerOptions) {\n  const { aspect, quality, videoMaxDuration } = options;\n\n  if (aspect != null) {\n    const [x, y] = aspect;\n\n    if (x <= 0 || y <= 0) {\n      throw new CodedError(\n        'ERR_INVALID_ARGUMENT',\n        `Invalid aspect ratio values ${x}:${y}. Provide positive numbers.`\n      );\n    }\n  }\n\n  if (quality && (quality < 0 || quality > 1)) {\n    throw new CodedError(\n      'ERR_INVALID_ARGUMENT',\n      `Invalid 'quality' value ${quality}. Provide a value between 0 and 1.`\n    );\n  }\n\n  if (videoMaxDuration && videoMaxDuration < 0) {\n    throw new CodedError(\n      'ERR_INVALID_ARGUMENT',\n      `Invalid 'videoMaxDuration' value ${videoMaxDuration}. Provide a non-negative number.`\n    );\n  }\n\n  return options;\n}\n\n// @needsAudit\n/**\n * Checks user's permissions for accessing camera.\n * @return A promise that fulfills with an object of type [CameraPermissionResponse](#camerapermissionresponse).\n */\nexport async function getCameraPermissionsAsync(): Promise<CameraPermissionResponse> {\n  return ExponentImagePicker.getCameraPermissionsAsync();\n}\n\n// @needsAudit\n/**\n * Checks user's permissions for accessing photos.\n * @param writeOnly Whether to request write or read and write permissions. Defaults to `false`\n * @return A promise that fulfills with an object of type [MediaLibraryPermissionResponse](#medialibrarypermissionresponse).\n */\nexport async function getMediaLibraryPermissionsAsync(\n  writeOnly: boolean = false\n): Promise<MediaLibraryPermissionResponse> {\n  return ExponentImagePicker.getMediaLibraryPermissionsAsync(writeOnly);\n}\n\n// @needsAudit\n/**\n * Asks the user to grant permissions for accessing camera. This does nothing on web because the\n * browser camera is not used.\n * @return A promise that fulfills with an object of type [CameraPermissionResponse](#camerarollpermissionresponse).\n */\nexport async function requestCameraPermissionsAsync(): Promise<CameraPermissionResponse> {\n  return ExponentImagePicker.requestCameraPermissionsAsync();\n}\n\n// @needsAudit\n/**\n * Asks the user to grant permissions for accessing user's photo. This method does nothing on web.\n * @param writeOnly Whether to request write or read and write permissions. Defaults to `false`\n * @return A promise that fulfills with an object of type [MediaLibraryPermissionResponse](#medialibrarypermissionresponse).\n */\nexport async function requestMediaLibraryPermissionsAsync(\n  writeOnly: boolean = false\n): Promise<MediaLibraryPermissionResponse> {\n  const imagePickerMethod = ExponentImagePicker.requestMediaLibraryPermissionsAsync;\n  return imagePickerMethod(writeOnly);\n}\n\n// @needsAudit\n/**\n * Check or request permissions to access the media library.\n * This uses both `requestMediaLibraryPermissionsAsync` and `getMediaLibraryPermissionsAsync` to interact with the permissions.\n *\n * @example\n * ```ts\n * const [status, requestPermission] = ImagePicker.useMediaLibraryPermissions();\n * ```\n */\nexport const useMediaLibraryPermissions = createPermissionHook<\n  MediaLibraryPermissionResponse,\n  { writeOnly?: boolean }\n>({\n  // TODO(cedric): permission requesters should have an options param or a different requester\n  getMethod: (options) => getMediaLibraryPermissionsAsync(options?.writeOnly),\n  requestMethod: (options) => requestMediaLibraryPermissionsAsync(options?.writeOnly),\n});\n\n// @needsAudit\n/**\n * Check or request permissions to access the camera.\n * This uses both `requestCameraPermissionsAsync` and `getCameraPermissionsAsync` to interact with the permissions.\n *\n * @example\n * ```ts\n * const [status, requestPermission] = ImagePicker.useCameraPermissions();\n * ```\n */\nexport const useCameraPermissions = createPermissionHook({\n  getMethod: getCameraPermissionsAsync,\n  requestMethod: requestCameraPermissionsAsync,\n});\n\n// @needsAudit\n/**\n * Android system sometimes kills the `MainActivity` after the `ImagePicker` finishes. When this\n * happens, we lose the data selected using the `ImagePicker`. However, you can retrieve the lost\n * data by calling `getPendingResultAsync`. You can test this functionality by turning on\n * `Don't keep activities` in the developer options.\n * @return\n * - **On Android:** a promise that resolves to an object of exactly same type as in\n * `ImagePicker.launchImageLibraryAsync` or `ImagePicker.launchCameraAsync` if the `ImagePicker`\n * finished successfully. Otherwise, an object of type [`ImagePickerErrorResult`](#imagepickerimagepickererrorresult).\n * - **On other platforms:** `null`\n */\nexport async function getPendingResultAsync(): Promise<\n  ImagePickerResult | ImagePickerErrorResult | null\n> {\n  if (ExponentImagePicker.getPendingResultAsync) {\n    return ExponentImagePicker.getPendingResultAsync();\n  }\n  return null;\n}\n\n// @needsAudit\n/**\n * Display the system UI for taking a photo with the camera. Requires `Permissions.CAMERA`.\n * On Android and iOS 10 `Permissions.CAMERA_ROLL` is also required. On mobile web, this must be\n * called immediately in a user interaction like a button press, otherwise the browser will block\n * the request without a warning.\n * > **Note:** Make sure that you handle `MainActivity` destruction on **Android**. See [ImagePicker.getPendingResultAsync](#imagepickergetpendingresultasync).\n * > **Notes for Web:** The system UI can only be shown after user activation (e.g. a `Button` press).\n * Therefore, calling `launchCameraAsync` in `componentDidMount`, for example, will **not** work as\n * intended. The `cancelled` event will not be returned in the browser due to platform restrictions\n * and inconsistencies across browsers.\n * @param options An `ImagePickerOptions` object.\n * @return A promise that resolves to an object with `canceled` and `assets` fields.\n * When the user canceled the action the `assets` is always `null`, otherwise it's an array of\n * the selected media assets which have a form of [`ImagePickerAsset`](#imagepickerasset).\n */\nexport async function launchCameraAsync(\n  options: ImagePickerOptions = {}\n): Promise<ImagePickerResult> {\n  if (!ExponentImagePicker.launchCameraAsync) {\n    throw new UnavailabilityError('ImagePicker', 'launchCameraAsync');\n  }\n  const mappedOptions = mapDeprecatedOptions(options);\n  return await ExponentImagePicker.launchCameraAsync(validateOptions(mappedOptions));\n}\n\n// @needsAudit\n/**\n * Display the system UI for choosing an image or a video from the phone's library.\n * Requires `Permissions.MEDIA_LIBRARY` on iOS 10 only. On mobile web, this must be     called\n * immediately in a user interaction like a button press, otherwise the browser will block the\n * request without a warning.\n *\n * **Animated GIFs support:** On Android, if the selected image is an animated GIF, the result image will be an\n * animated GIF too if and only if `quality` is explicitly set to `1.0` and `allowsEditing` is set to `false`.\n * Otherwise compression and/or cropper will pick the first frame of the GIF and return it as the\n * result (on Android the result will be a PNG). On iOS, both quality and cropping are supported.\n *\n * > **Notes for Web:** The system UI can only be shown after user activation (e.g. a `Button` press).\n * Therefore, calling `launchImageLibraryAsync` in `componentDidMount`, for example, will **not**\n * work as intended. The `cancelled` event will not be returned in the browser due to platform\n * restrictions and inconsistencies across browsers.\n * @param options An object extended by [`ImagePickerOptions`](#imagepickeroptions).\n * @return A promise that resolves to an object with `canceled` and `assets` fields.\n * When the user canceled the action the `assets` is always `null`, otherwise it's an array of\n * the selected media assets which have a form of [`ImagePickerAsset`](#imagepickerasset).\n */\nexport async function launchImageLibraryAsync(\n  options: ImagePickerOptions = {}\n): Promise<ImagePickerResult> {\n  const mappedOptions = mapDeprecatedOptions(options);\n\n  if (!ExponentImagePicker.launchImageLibraryAsync) {\n    throw new UnavailabilityError('ImagePicker', 'launchImageLibraryAsync');\n  }\n  if (mappedOptions?.allowsEditing && mappedOptions.allowsMultipleSelection) {\n    console.warn(\n      '[expo-image-picker] `allowsEditing` is not supported when `allowsMultipleSelection` is enabled and will be ignored.' +\n        \"Disable either 'allowsEditing' or 'allowsMultipleSelection' in 'launchImageLibraryAsync' \" +\n        'to fix this warning.'\n    );\n  }\n  return await ExponentImagePicker.launchImageLibraryAsync(mappedOptions);\n}\n\nexport * from './ImagePicker.types';\n\nexport type { PermissionExpiration, PermissionHookOptions, PermissionResponse };\nexport { PermissionStatus };\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}