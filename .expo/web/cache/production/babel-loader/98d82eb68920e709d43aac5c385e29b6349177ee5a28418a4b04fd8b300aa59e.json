{"ast":null,"code":"export class EventEmitter{addListener(eventName,listener){if(!this.listeners){this.listeners=new Map();}if(!this.listeners?.has(eventName)){this.listeners?.set(eventName,new Set());}const previousListenerCount=this.listenerCount(eventName);this.listeners?.get(eventName)?.add(listener);if(previousListenerCount===0&&this.listenerCount(eventName)===1){this.startObserving(eventName);}return{remove:()=>{this.removeListener(eventName,listener);}};}removeListener(eventName,listener){const hasRemovedListener=this.listeners?.get(eventName)?.delete(listener);if(this.listenerCount(eventName)===0&&hasRemovedListener){this.stopObserving(eventName);}}removeAllListeners(eventName){const previousListenerCount=this.listenerCount(eventName);this.listeners?.get(eventName)?.clear();if(previousListenerCount>0){this.stopObserving(eventName);}}emit(eventName,...args){const listeners=new Set(this.listeners?.get(eventName));listeners.forEach(listener=>{try{listener(...args);}catch(error){console.error(error);}});}listenerCount(eventName){return this.listeners?.get(eventName)?.size??0;}startObserving(eventName){}stopObserving(eventName){}}export class NativeModule extends EventEmitter{}export class SharedObject extends EventEmitter{release(){}}export class SharedRef extends SharedObject{nativeRefType='unknown';}","map":{"version":3,"names":["EventEmitter","addListener","eventName","listener","listeners","Map","has","set","Set","previousListenerCount","listenerCount","get","add","startObserving","remove","removeListener","hasRemovedListener","delete","stopObserving","removeAllListeners","clear","emit","args","forEach","error","console","size","NativeModule","SharedObject","release","SharedRef","nativeRefType"],"sources":["C:/Users/chaud/radha-counter/node_modules/expo-modules-core/src/web/CoreModule.ts"],"sourcesContent":["import {\n  type EventEmitter as EventEmitterType,\n  type EventSubscription,\n  EventsMap,\n} from '../ts-declarations/EventEmitter';\nimport type { NativeModule as NativeModuleType } from '../ts-declarations/NativeModule';\nimport type { SharedObject as SharedObjectType } from '../ts-declarations/SharedObject';\nimport type { SharedRef as SharedRefType } from '../ts-declarations/SharedRef';\n\nexport class EventEmitter<TEventsMap extends EventsMap> implements EventEmitterType {\n  private listeners?: Map<keyof TEventsMap, Set<Function>>;\n\n  addListener<EventName extends keyof TEventsMap>(\n    eventName: EventName,\n    listener: TEventsMap[EventName]\n  ): EventSubscription {\n    if (!this.listeners) {\n      this.listeners = new Map();\n    }\n    if (!this.listeners?.has(eventName)) {\n      this.listeners?.set(eventName, new Set());\n    }\n\n    const previousListenerCount = this.listenerCount(eventName);\n\n    this.listeners?.get(eventName)?.add(listener);\n\n    if (previousListenerCount === 0 && this.listenerCount(eventName) === 1) {\n      this.startObserving(eventName);\n    }\n\n    return {\n      remove: () => {\n        this.removeListener(eventName, listener);\n      },\n    };\n  }\n\n  removeListener<EventName extends keyof TEventsMap>(\n    eventName: EventName,\n    listener: TEventsMap[EventName]\n  ): void {\n    const hasRemovedListener = this.listeners?.get(eventName)?.delete(listener);\n    if (this.listenerCount(eventName) === 0 && hasRemovedListener) {\n      this.stopObserving(eventName);\n    }\n  }\n\n  removeAllListeners<EventName extends keyof TEventsMap>(eventName: EventName): void {\n    const previousListenerCount = this.listenerCount(eventName);\n    this.listeners?.get(eventName)?.clear();\n    if (previousListenerCount > 0) {\n      this.stopObserving(eventName);\n    }\n  }\n\n  emit<EventName extends keyof TEventsMap>(\n    eventName: EventName,\n    ...args: Parameters<TEventsMap[EventName]>\n  ): void {\n    const listeners = new Set(this.listeners?.get(eventName));\n\n    listeners.forEach((listener) => {\n      // When the listener throws an error, don't stop the execution of subsequent listeners and\n      // don't propagate the error to the `emit` function. The motivation behind this is that\n      // errors thrown from a module or user's code shouldn't affect other modules' behavior.\n      try {\n        listener(...args);\n      } catch (error) {\n        console.error(error);\n      }\n    });\n  }\n\n  listenerCount<EventName extends keyof TEventsMap>(eventName: EventName): number {\n    return this.listeners?.get(eventName)?.size ?? 0;\n  }\n\n  startObserving<EventName extends keyof TEventsMap>(eventName: EventName): void {}\n\n  stopObserving<EventName extends keyof TEventsMap>(eventName: EventName): void {}\n}\n\nexport class NativeModule<TEventsMap extends Record<never, never>>\n  extends EventEmitter<TEventsMap>\n  implements NativeModuleType\n{\n  [key: string]: any;\n  ViewPrototypes?: { [viewName: string]: object };\n  __expo_module_name__?: string;\n}\n\nexport class SharedObject<TEventsMap extends Record<never, never>>\n  extends EventEmitter<TEventsMap>\n  implements SharedObjectType\n{\n  release(): void {\n    // no-op on Web, but subclasses can override it if needed.\n  }\n}\n\nexport class SharedRef<\n    TNativeRefType extends string = 'unknown',\n    TEventsMap extends EventsMap = Record<never, never>,\n  >\n  extends SharedObject<TEventsMap>\n  implements SharedRefType<TNativeRefType>\n{\n  nativeRefType: string = 'unknown';\n}\n"],"mappings":"AASA,MAAO,MAAM,CAAAA,YAAuE,CAGlFC,WAAWA,CACTC,SAAoB,CACpBC,QAA+B,CACZ,CACnB,GAAI,CAAC,IAAI,CAACC,SAAS,CAAE,CACnB,IAAI,CAACA,SAAS,CAAG,GAAI,CAAAC,GAAG,CAAC,CAAC,CAC5B,CACA,GAAI,CAAC,IAAI,CAACD,SAAS,EAAEE,GAAG,CAACJ,SAAS,CAAC,CAAE,CACnC,IAAI,CAACE,SAAS,EAAEG,GAAG,CAACL,SAAS,CAAE,GAAI,CAAAM,GAAG,CAAC,CAAC,CAAC,CAC3C,CAEA,KAAM,CAAAC,qBAAqB,CAAG,IAAI,CAACC,aAAa,CAACR,SAAS,CAAC,CAE3D,IAAI,CAACE,SAAS,EAAEO,GAAG,CAACT,SAAS,CAAC,EAAEU,GAAG,CAACT,QAAQ,CAAC,CAE7C,GAAIM,qBAAqB,GAAK,CAAC,EAAI,IAAI,CAACC,aAAa,CAACR,SAAS,CAAC,GAAK,CAAC,CAAE,CACtE,IAAI,CAACW,cAAc,CAACX,SAAS,CAAC,CAChC,CAEA,MAAO,CACLY,MAAM,CAAEA,CAAA,GAAM,CACZ,IAAI,CAACC,cAAc,CAACb,SAAS,CAAEC,QAAQ,CAAC,CAC1C,CACF,CAAC,CACH,CAEAY,cAAcA,CACZb,SAAoB,CACpBC,QAA+B,CACzB,CACN,KAAM,CAAAa,kBAAkB,CAAG,IAAI,CAACZ,SAAS,EAAEO,GAAG,CAACT,SAAS,CAAC,EAAEe,MAAM,CAACd,QAAQ,CAAC,CAC3E,GAAI,IAAI,CAACO,aAAa,CAACR,SAAS,CAAC,GAAK,CAAC,EAAIc,kBAAkB,CAAE,CAC7D,IAAI,CAACE,aAAa,CAAChB,SAAS,CAAC,CAC/B,CACF,CAEAiB,kBAAkBA,CAAqCjB,SAAoB,CAAQ,CACjF,KAAM,CAAAO,qBAAqB,CAAG,IAAI,CAACC,aAAa,CAACR,SAAS,CAAC,CAC3D,IAAI,CAACE,SAAS,EAAEO,GAAG,CAACT,SAAS,CAAC,EAAEkB,KAAK,CAAC,CAAC,CACvC,GAAIX,qBAAqB,CAAG,CAAC,CAAE,CAC7B,IAAI,CAACS,aAAa,CAAChB,SAAS,CAAC,CAC/B,CACF,CAEAmB,IAAIA,CACFnB,SAAoB,CACpB,GAAGoB,IAAuC,CACpC,CACN,KAAM,CAAAlB,SAAS,CAAG,GAAI,CAAAI,GAAG,CAAC,IAAI,CAACJ,SAAS,EAAEO,GAAG,CAACT,SAAS,CAAC,CAAC,CAEzDE,SAAS,CAACmB,OAAO,CAAEpB,QAAQ,EAAK,CAI9B,GAAI,CACFA,QAAQ,CAAC,GAAGmB,IAAI,CAAC,CACnB,CAAE,MAAOE,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC,CACtB,CACF,CAAC,CAAC,CACJ,CAEAd,aAAaA,CAAqCR,SAAoB,CAAU,CAC9E,MAAO,KAAI,CAACE,SAAS,EAAEO,GAAG,CAACT,SAAS,CAAC,EAAEwB,IAAI,EAAI,CAAC,CAClD,CAEAb,cAAcA,CAAqCX,SAAoB,CAAQ,CAAC,CAEhFgB,aAAaA,CAAqChB,SAAoB,CAAQ,CAAC,CACjF,CAEA,MAAO,MAAM,CAAAyB,YAAY,QACf,CAAA3B,YAEV,EAMA,MAAO,MAAM,CAAA4B,YAAY,QACf,CAAA5B,YAEV,CACE6B,OAAOA,CAAA,CAAS,CAEhB,CACF,CAEA,MAAO,MAAM,CAAAC,SAAS,QAIZ,CAAAF,YAEV,CACEG,aAAa,CAAW,SAAS,CACnC","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}