{"ast":null,"code":"import React,{useRef,useMemo,useCallback}from'react';import Text from\"react-native-web/dist/exports/Text\";import{toMarkingFormat}from'../interface';import{extractCalendarProps}from'../componentUpdater';import styleConstructor from'./style';import Calendar from'../calendar';import{jsx as _jsx}from\"react/jsx-runtime\";const CalendarListItem=React.memo(props=>{const{item,theme,scrollToMonth,horizontal,calendarHeight,calendarWidth,style:propsStyle,headerStyle,onPressArrowLeft,onPressArrowRight,visible}=props;const style=useRef(styleConstructor(theme));const calendarProps=extractCalendarProps(props);const dateString=toMarkingFormat(item);const calendarStyle=useMemo(()=>{return[{width:calendarWidth,minHeight:calendarHeight},style.current.calendar,propsStyle];},[calendarWidth,calendarHeight,propsStyle]);const textStyle=useMemo(()=>{return[calendarStyle,style.current.placeholderText];},[calendarStyle]);const _onPressArrowLeft=useCallback((method,month)=>{const monthClone=month?.clone();if(monthClone){if(onPressArrowLeft){onPressArrowLeft(method,monthClone);}else if(scrollToMonth){const currentMonth=monthClone.getMonth();monthClone.addMonths(-1);while(monthClone.getMonth()===currentMonth){monthClone.setDate(monthClone.getDate()-1);}scrollToMonth(monthClone);}}},[onPressArrowLeft,scrollToMonth]);const _onPressArrowRight=useCallback((method,month)=>{const monthClone=month?.clone();if(monthClone){if(onPressArrowRight){onPressArrowRight(method,monthClone);}else if(scrollToMonth){monthClone.addMonths(1);scrollToMonth(monthClone);}}},[onPressArrowRight,scrollToMonth]);if(!visible){return _jsx(Text,{style:textStyle,children:dateString});}return _jsx(Calendar,Object.assign({hideArrows:true,hideExtraDays:true},calendarProps,{current:dateString,style:calendarStyle,headerStyle:horizontal?headerStyle:undefined,disableMonthChange:true,onPressArrowLeft:horizontal?_onPressArrowLeft:onPressArrowLeft,onPressArrowRight:horizontal?_onPressArrowRight:onPressArrowRight}));});export default CalendarListItem;CalendarListItem.displayName='CalendarListItem';","map":{"version":3,"names":["React","useRef","useMemo","useCallback","Text","toMarkingFormat","extractCalendarProps","styleConstructor","Calendar","jsx","_jsx","CalendarListItem","memo","props","item","theme","scrollToMonth","horizontal","calendarHeight","calendarWidth","style","propsStyle","headerStyle","onPressArrowLeft","onPressArrowRight","visible","calendarProps","dateString","calendarStyle","width","minHeight","current","calendar","textStyle","placeholderText","_onPressArrowLeft","method","month","monthClone","clone","currentMonth","getMonth","addMonths","setDate","getDate","_onPressArrowRight","children","Object","assign","hideArrows","hideExtraDays","undefined","disableMonthChange","displayName"],"sources":["C:/Users/chaud/radha-counter/node_modules/react-native-calendars/src/calendar-list/item.js"],"sourcesContent":["import React, { useRef, useMemo, useCallback } from 'react';\nimport { Text } from 'react-native';\nimport { toMarkingFormat } from '../interface';\nimport { extractCalendarProps } from '../componentUpdater';\nimport styleConstructor from './style';\nimport Calendar from '../calendar';\nconst CalendarListItem = React.memo((props) => {\n    const { item, theme, scrollToMonth, horizontal, calendarHeight, calendarWidth, style: propsStyle, headerStyle, onPressArrowLeft, onPressArrowRight, visible } = props;\n    const style = useRef(styleConstructor(theme));\n    const calendarProps = extractCalendarProps(props);\n    const dateString = toMarkingFormat(item);\n    const calendarStyle = useMemo(() => {\n        return [\n            {\n                width: calendarWidth,\n                minHeight: calendarHeight\n            },\n            style.current.calendar,\n            propsStyle\n        ];\n    }, [calendarWidth, calendarHeight, propsStyle]);\n    const textStyle = useMemo(() => {\n        return [calendarStyle, style.current.placeholderText];\n    }, [calendarStyle]);\n    const _onPressArrowLeft = useCallback((method, month) => {\n        const monthClone = month?.clone();\n        if (monthClone) {\n            if (onPressArrowLeft) {\n                onPressArrowLeft(method, monthClone);\n            }\n            else if (scrollToMonth) {\n                const currentMonth = monthClone.getMonth();\n                monthClone.addMonths(-1);\n                // Make sure we actually get the previous month, not just 30 days before currentMonth.\n                while (monthClone.getMonth() === currentMonth) {\n                    monthClone.setDate(monthClone.getDate() - 1);\n                }\n                scrollToMonth(monthClone);\n            }\n        }\n    }, [onPressArrowLeft, scrollToMonth]);\n    const _onPressArrowRight = useCallback((method, month) => {\n        const monthClone = month?.clone();\n        if (monthClone) {\n            if (onPressArrowRight) {\n                onPressArrowRight(method, monthClone);\n            }\n            else if (scrollToMonth) {\n                monthClone.addMonths(1);\n                scrollToMonth(monthClone);\n            }\n        }\n    }, [onPressArrowRight, scrollToMonth]);\n    if (!visible) {\n        return (<Text style={textStyle}>{dateString}</Text>);\n    }\n    return (<Calendar hideArrows={true} hideExtraDays={true} {...calendarProps} current={dateString} style={calendarStyle} headerStyle={horizontal ? headerStyle : undefined} disableMonthChange onPressArrowLeft={horizontal ? _onPressArrowLeft : onPressArrowLeft} onPressArrowRight={horizontal ? _onPressArrowRight : onPressArrowRight}/>);\n});\nexport default CalendarListItem;\nCalendarListItem.displayName = 'CalendarListItem';\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}